/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2017-10-19T20:46:04.881+11:00
  3.14.0.3
  
  Standalone prediction code with sample test data for GBMModel named irisModel

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/irisModel > irisModel.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m irisModel.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="irisModel", algorithm="gbm")
public class irisModel extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Multinomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 4; }
  public int nclasses() { return 3; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_irisModel.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 3;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* c0 */ null,
    /* c1 */ null,
    /* c2 */ null,
    /* c3 */ null,
    /* l */ irisModel_ColInfo_4.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.3333333333333333,0.3333333333333333,0.3333333333333333};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.3333333333333333,0.3333333333333333,0.3333333333333333};

  public irisModel() { super(NAMES,DOMAINS,"l"); }
  public String getUUID() { return Long.toString(-5917895267766140988L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    irisModel_Forest_0.score0(data,preds);
    irisModel_Forest_1.score0(data,preds);
    irisModel_Forest_2.score0(data,preds);
    irisModel_Forest_3.score0(data,preds);
    irisModel_Forest_4.score0(data,preds);
    irisModel_Forest_5.score0(data,preds);
    irisModel_Forest_6.score0(data,preds);
    irisModel_Forest_7.score0(data,preds);
    irisModel_Forest_8.score0(data,preds);
    irisModel_Forest_9.score0(data,preds);
    irisModel_Forest_10.score0(data,preds);
    irisModel_Forest_11.score0(data,preds);
    irisModel_Forest_12.score0(data,preds);
    irisModel_Forest_13.score0(data,preds);
    irisModel_Forest_14.score0(data,preds);
    irisModel_Forest_15.score0(data,preds);
    irisModel_Forest_16.score0(data,preds);
    irisModel_Forest_17.score0(data,preds);
    irisModel_Forest_18.score0(data,preds);
    irisModel_Forest_19.score0(data,preds);
    irisModel_Forest_20.score0(data,preds);
    irisModel_Forest_21.score0(data,preds);
    irisModel_Forest_22.score0(data,preds);
    irisModel_Forest_23.score0(data,preds);
    irisModel_Forest_24.score0(data,preds);
    irisModel_Forest_25.score0(data,preds);
    irisModel_Forest_26.score0(data,preds);
    irisModel_Forest_27.score0(data,preds);
    irisModel_Forest_28.score0(data,preds);
    irisModel_Forest_29.score0(data,preds);
    irisModel_Forest_30.score0(data,preds);
    irisModel_Forest_31.score0(data,preds);
    irisModel_Forest_32.score0(data,preds);
    irisModel_Forest_33.score0(data,preds);
    irisModel_Forest_34.score0(data,preds);
    irisModel_Forest_35.score0(data,preds);
    irisModel_Forest_36.score0(data,preds);
    irisModel_Forest_37.score0(data,preds);
    irisModel_Forest_38.score0(data,preds);
    irisModel_Forest_39.score0(data,preds);
    irisModel_Forest_40.score0(data,preds);
    irisModel_Forest_41.score0(data,preds);
    irisModel_Forest_42.score0(data,preds);
    irisModel_Forest_43.score0(data,preds);
    irisModel_Forest_44.score0(data,preds);
    irisModel_Forest_45.score0(data,preds);
    irisModel_Forest_46.score0(data,preds);
    irisModel_Forest_47.score0(data,preds);
    irisModel_Forest_48.score0(data,preds);
    irisModel_Forest_49.score0(data,preds);
    hex.genmodel.GenModel.GBM_rescale(preds);
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_irisModel implements java.io.Serializable {
  public static final String[] VALUES = new String[4];
  static {
    NamesHolder_irisModel_0.fill(VALUES);
  }
  static final class NamesHolder_irisModel_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "c0";
      sa[1] = "c1";
      sa[2] = "c2";
      sa[3] = "c3";
    }
  }
}
// The class representing column l
class irisModel_ColInfo_4 implements java.io.Serializable {
  public static final String[] VALUES = new String[3];
  static {
    irisModel_ColInfo_4_0.fill(VALUES);
  }
  static final class irisModel_ColInfo_4_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
      sa[2] = "2";
    }
  }
}

class irisModel_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_0_class_0.score0(fdata);
    preds[2] += irisModel_Tree_0_class_1.score0(fdata);
    preds[3] += irisModel_Tree_0_class_2.score0(fdata);
  }
}
class irisModel_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
        0.19999997f : 
        -0.1f);
    return pred;
  } // constant pool size = 6B, number of visited nodes = 1, static init size = 0B
}

class irisModel_Tree_0_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
        -0.1f : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.65293f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.45277f ? 
                    0.19999997f : 
                    0.17272726f) : 
                0.1142857f) : 
             (data[0 /* c0 */] <6.2476563f ? 
                -0.07272728f : 
                -0.1f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class irisModel_Tree_0_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <4.65293f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.4531603f ? 
                -0.1f : 
                -0.07272728f) : 
            -0.014285719f) : 
         (data[0 /* c0 */] <6.251172f ? 
            0.17272726f : 
            0.19999997f));
    return pred;
  } // constant pool size = 18B, number of visited nodes = 4, static init size = 0B
}


class irisModel_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_1_class_0.score0(fdata);
    preds[2] += irisModel_Tree_1_class_1.score0(fdata);
    preds[3] += irisModel_Tree_1_class_2.score0(fdata);
  }
}
class irisModel_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
        0.16544242f : 
         (data[2 /* c2 */] <4.450099f ? 
            -0.09503717f : 
             (data[3 /* c3 */] <1.75f ? 
                 (data[2 /* c2 */] <4.65f ? 
                    -0.095142215f : 
                    -0.095297754f) : 
                 (data[0 /* c0 */] <6.2476563f ? 
                    -0.095142215f : 
                    -0.09503717f))));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}

class irisModel_Tree_1_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
        -0.09503717f : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.6515625f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.65293f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.45277f ? 
                    0.16544242f : 
                    0.16957662f) : 
                0.09131485f) : 
             (data[2 /* c2 */] <5.0490236f ? 
                -0.03712585f : 
                 (data[2 /* c2 */] <5.4539247f ? 
                    -0.09555979f : 
                    -0.09503717f))));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class irisModel_Tree_1_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.6503906f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <4.65293f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.4531603f ? 
                -0.09503717f : 
                -0.09627921f) : 
            -0.0059446166f) : 
         (data[2 /* c2 */] <5.0504885f ? 
            0.119372696f : 
             (data[2 /* c2 */] <5.451457f ? 
                0.1671566f : 
                0.16544242f)));
    return pred;
  } // constant pool size = 22B, number of visited nodes = 5, static init size = 0B
}


class irisModel_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_2_class_0.score0(fdata);
    preds[2] += irisModel_Tree_2_class_1.score0(fdata);
    preds[3] += irisModel_Tree_2_class_2.score0(fdata);
  }
}
class irisModel_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
        0.14279136f : 
         (data[2 /* c2 */] <4.450099f ? 
            -0.09089577f : 
             (data[3 /* c3 */] <1.75f ? 
                 (data[2 /* c2 */] <4.65f ? 
                    -0.091075316f : 
                    -0.09151465f) : 
                 (data[0 /* c0 */] <6.2476563f ? 
                    -0.09113215f : 
                     (data[3 /* c3 */] <1.953125f ? 
                        -0.0909278f : 
                        -0.09089053f)))));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}

class irisModel_Tree_2_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
        -0.09089577f : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.65293f ? 
                 (data[0 /* c0 */] <5.546875f ? 
                    0.12319571f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.3375f ? 
                        0.14279136f : 
                        0.14489378f)) : 
                0.086685784f) : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1496093f ? 
                 (data[0 /* c0 */] <6.345703f ? 
                    -0.09305751f : 
                     (data[0 /* c0 */] <6.74776f ? 
                        -0.09088405f : 
                        -0.09088796f)) : 
                -0.06700113f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_2_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.8488283f ? 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.3546877f ? 
                -0.09089577f : 
                -0.09412296f) : 
            -0.03334256f) : 
         (data[2 /* c2 */] <5.149293f ? 
            0.09943313f : 
             (data[3 /* c3 */] <1.95f ? 
                0.15419683f : 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                    0.1427567f : 
                    0.14305198f))));
    return pred;
  } // constant pool size = 26B, number of visited nodes = 6, static init size = 0B
}


class irisModel_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_3_class_0.score0(fdata);
    preds[2] += irisModel_Tree_3_class_1.score0(fdata);
    preds[3] += irisModel_Tree_3_class_2.score0(fdata);
  }
}
class irisModel_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
        0.12692769f : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <5.1494503f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.649871f ? 
                 (data[0 /* c0 */] <5.548047f ? 
                    -0.08773579f : 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <1.35f ? 
                        -0.08743381f : 
                        -0.08723304f)) : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.950543f ? 
                    -0.08889633f : 
                    -0.08792603f)) : 
             (data[3 /* c3 */] <1.9492188f ? 
                -0.087153204f : 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                    -0.08741398f : 
                    -0.08727362f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_3_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
        -0.08741831f : 
         (data[2 /* c2 */] <4.8497286f ? 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.4511719f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.35f ? 
                     (data[1 /* c1 */] <2.54375f ? 
                        0.12788185f : 
                        0.12701294f) : 
                    0.13528204f) : 
                0.09464298f) : 
             (data[2 /* c2 */] <5.150061f ? 
                -0.024400674f : 
                 (data[3 /* c3 */] <1.95f ? 
                    -0.093975686f : 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                        -0.08741083f : 
                        -0.088002525f)))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_3_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.6503906f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <4.65293f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.4531603f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <2.456802f ? 
                    -0.08741831f : 
                     (data[0 /* c0 */] <5.5375f ? 
                        -0.08769264f : 
                        -0.08746965f)) : 
                -0.08919612f) : 
            -0.005464209f) : 
         (data[2 /* c2 */] <5.0504885f ? 
            0.094578f : 
             (data[2 /* c2 */] <5.451457f ? 
                0.12933038f : 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                    0.12666883f : 
                    0.12757294f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_4_class_0.score0(fdata);
    preds[2] += irisModel_Tree_4_class_1.score0(fdata);
    preds[3] += irisModel_Tree_4_class_2.score0(fdata);
  }
}
class irisModel_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
        0.115301475f : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <5.1494503f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.649871f ? 
                 (data[0 /* c0 */] <5.548047f ? 
                    -0.08474569f : 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <1.35f ? 
                        -0.0844823f : 
                        -0.08464653f)) : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.950543f ? 
                    -0.08578074f : 
                    -0.08521188f)) : 
             (data[3 /* c3 */] <1.9492188f ? 
                -0.08472449f : 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                    -0.08447607f : 
                    -0.08437565f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_4_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
        -0.08448473f : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.7499542f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.65293f ? 
                 (data[0 /* c0 */] <5.546875f ? 
                    0.096840255f : 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <1.35f ? 
                        0.11538624f : 
                        0.11852978f)) : 
                0.0735551f) : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1496093f ? 
                 (data[2 /* c2 */] <5.1527343f ? 
                    -0.08937519f : 
                    -0.08438126f) : 
                -0.058402594f)));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}

class irisModel_Tree_4_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.6503906f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <4.65293f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.4531603f ? 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <0.79726565f ? 
                    -0.08448473f : 
                     (data[0 /* c0 */] <5.5375f ? 
                        -0.08471147f : 
                        -0.08453423f)) : 
                -0.0862996f) : 
            -0.005845173f) : 
         (data[2 /* c2 */] <5.0504885f ? 
            0.08604707f : 
             (data[2 /* c2 */] <5.3503118f ? 
                0.11828123f : 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                    0.11505153f : 
                    0.11594205f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_5_class_0.score0(fdata);
    preds[2] += irisModel_Tree_5_class_1.score0(fdata);
    preds[3] += irisModel_Tree_5_class_2.score0(fdata);
  }
}
class irisModel_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
        0.106493995f : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <5.1494503f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.649871f ? 
                 (data[0 /* c0 */] <5.548047f ? 
                    -0.08240857f : 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <1.35f ? 
                        -0.08199961f : 
                        -0.082159154f)) : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.950543f ? 
                    -0.083578706f : 
                    -0.08283403f)) : 
             (data[3 /* c3 */] <1.9492188f ? 
                -0.08229731f : 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                    -0.081989124f : 
                    -0.08181938f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_5_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
        -0.082000144f : 
         (data[2 /* c2 */] <4.8497286f ? 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.4511719f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.35f ? 
                     (data[1 /* c1 */] <2.54375f ? 
                        0.107674025f : 
                        0.10659503f) : 
                    0.11470623f) : 
                0.07909223f) : 
             (data[2 /* c2 */] <5.150061f ? 
                -0.020389562f : 
                 (data[3 /* c3 */] <1.95f ? 
                    -0.091781646f : 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                        -0.081988804f : 
                        -0.08281834f)))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_5_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.8488283f ? 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.3546877f ? 
                 (data[1 /* c1 */] <2.54375f ? 
                    -0.082316816f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <3.7585938f ? 
                        -0.08200001f : 
                        -0.08203482f)) : 
                -0.086565554f) : 
            -0.028036064f) : 
         (data[2 /* c2 */] <5.149293f ? 
            0.072158836f : 
             (data[3 /* c3 */] <1.95f ? 
                0.1210278f : 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                    0.10645627f : 
                    0.10756443f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_6_class_0.score0(fdata);
    preds[2] += irisModel_Tree_6_class_1.score0(fdata);
    preds[3] += irisModel_Tree_6_class_2.score0(fdata);
  }
}
class irisModel_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (data[0 /* c0 */] <4.75f ? 
            0.099651396f : 
            0.09965187f) : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <5.1494503f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.649871f ? 
                 (data[0 /* c0 */] <5.548047f ? 
                    -0.08028545f : 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <1.35f ? 
                        -0.07987453f : 
                        -0.080127165f)) : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.950543f ? 
                    -0.081702895f : 
                    -0.080977246f)) : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.0511718f ? 
                -0.08009665f : 
                -0.079743065f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_6_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (data[2 /* c2 */] <1.4508995f ? 
            -0.0798884f : 
            -0.079888366f) : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
             (data[1 /* c1 */] <2.6503906f ? 
                0.06598495f : 
                 (Double.isNaN(data[0]) || data[0 /* c0 */] <6.2476563f ? 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.253125f ? 
                        0.1001293f : 
                        0.11090458f) : 
                    0.08482432f)) : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1496093f ? 
                 (data[2 /* c2 */] <5.1527343f ? 
                    -0.08646693f : 
                    -0.07971291f) : 
                -0.050405625f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_6_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.6503906f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <4.65293f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.4531603f ? 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <0.79726565f ? 
                    -0.079888284f : 
                     (data[0 /* c0 */] <5.5375f ? 
                        -0.0802421f : 
                        -0.079962455f)) : 
                -0.08208026f) : 
            -0.0059800223f) : 
         (data[1 /* c1 */] <2.8484375f ? 
            0.11162299f : 
             (data[3 /* c3 */] <1.9f ? 
                0.055315588f : 
                 (data[1 /* c1 */] <3.1496093f ? 
                    0.10008388f : 
                    0.10091515f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_7_class_0.score0(fdata);
    preds[2] += irisModel_Tree_7_class_1.score0(fdata);
    preds[3] += irisModel_Tree_7_class_2.score0(fdata);
  }
}
class irisModel_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
        0.094230816f : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <5.1484375f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.6490936f ? 
                 (data[0 /* c0 */] <5.548047f ? 
                    -0.07866457f : 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <1.35f ? 
                        -0.07816859f : 
                        -0.07838958f)) : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.950285f ? 
                    -0.07990821f : 
                    -0.07914519f)) : 
             (data[3 /* c3 */] <1.9492188f ? 
                -0.07864861f : 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                    -0.078039765f : 
                    -0.07791179f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_7_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
        -0.0780877f : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496355f ? 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.4511719f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.3507814f ? 
                     (data[1 /* c1 */] <2.646875f ? 
                        0.09583454f : 
                        0.09430653f) : 
                    0.10078571f) : 
                0.058928497f) : 
             (data[2 /* c2 */] <5.1477194f ? 
                -0.03801475f : 
                 (data[3 /* c3 */] <1.95f ? 
                    -0.08994951f : 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                        -0.07804391f : 
                        -0.07902293f)))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_7_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.3515625f ? 
                 (data[1 /* c1 */] <2.646875f ? 
                    -0.07859217f : 
                     (data[1 /* c1 */] <2.9481933f ? 
                        -0.07811666f : 
                        -0.078087315f)) : 
                -0.082382604f) : 
            -0.010137035f) : 
         (data[0 /* c0 */] <6.3496094f ? 
            0.10143f : 
             (data[2 /* c2 */] <5.5492187f ? 
                0.071512796f : 
                 (data[0 /* c0 */] <7.15f ? 
                    0.09446237f : 
                    0.10170226f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_8_class_0.score0(fdata);
    preds[2] += irisModel_Tree_8_class_1.score0(fdata);
    preds[3] += irisModel_Tree_8_class_2.score0(fdata);
  }
}
class irisModel_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (data[0 /* c0 */] <4.75f ? 
            0.08986691f : 
            0.08986779f) : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8484375f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.65293f ? 
                 (data[0 /* c0 */] <5.546875f ? 
                    -0.07708981f : 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <1.35f ? 
                        -0.07660783f : 
                        -0.0769518f)) : 
                 (Double.isNaN(data[0]) || data[0 /* c0 */] <6.353125f ? 
                    -0.07863535f : 
                    -0.07756066f)) : 
             (data[2 /* c2 */] <5.2470703f ? 
                -0.07717147f : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <5.8475485f ? 
                    -0.076496385f : 
                    -0.07639031f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class irisModel_Tree_8_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.150781f ? 
             (data[1 /* c1 */] <3.2474608f ? 
                -0.07654789f : 
                -0.076547824f) : 
            -0.076547824f) : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.7499542f ? 
             (data[1 /* c1 */] <2.6503906f ? 
                0.05455576f : 
                 (data[1 /* c1 */] <2.8495057f ? 
                    0.07751243f : 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <1.4484375f ? 
                        0.092351474f : 
                        0.09186554f))) : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1496093f ? 
                 (data[2 /* c2 */] <5.1527343f ? 
                    -0.08417936f : 
                    -0.07645768f) : 
                -0.042523414f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class irisModel_Tree_8_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.6503906f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <4.65293f ? 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.3480469f ? 
                 (data[1 /* c1 */] <2.646875f ? 
                    -0.07693895f : 
                     (Double.isNaN(data[0]) || data[0 /* c0 */] <5.6476564f ? 
                        -0.07654727f : 
                        -0.07655767f)) : 
                -0.078970574f) : 
            -0.004444817f) : 
         (data[1 /* c1 */] <2.8484375f ? 
            0.10254893f : 
             (data[3 /* c3 */] <1.9f ? 
                0.043850705f : 
                 (data[2 /* c2 */] <5.646094f ? 
                    0.0914444f : 
                    0.09034602f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_9_class_0.score0(fdata);
    preds[2] += irisModel_Tree_9_class_1.score0(fdata);
    preds[3] += irisModel_Tree_9_class_2.score0(fdata);
  }
}
class irisModel_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
        0.086310685f : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8511772f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.65293f ? 
                 (data[1 /* c1 */] <2.6507812f ? 
                    -0.07589459f : 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <1.35f ? 
                        -0.0752549f : 
                        -0.07561264f)) : 
                 (data[0 /* c0 */] <6.25f ? 
                    -0.07762366f : 
                    -0.07645653f)) : 
             (data[2 /* c2 */] <5.2470703f ? 
                -0.07576552f : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <5.8475485f ? 
                    -0.07514342f : 
                    -0.075050525f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_9_class_1 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (data[2 /* c2 */] <1.350227f ? 
            -0.07522763f : 
            -0.07522751f) : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496355f ? 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.4511719f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.3507814f ? 
                     (data[1 /* c1 */] <2.646875f ? 
                        0.08814887f : 
                        0.08645837f) : 
                    0.09172312f) : 
                0.051428918f) : 
             (data[0 /* c0 */] <6.3472657f ? 
                -0.06747247f : 
                 (data[2 /* c2 */] <5.5492187f ? 
                    -0.030597664f : 
                     (data[0 /* c0 */] <7.15f ? 
                        -0.07554764f : 
                        -0.0827649f)))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class irisModel_Tree_9_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.3515625f ? 
                 (data[1 /* c1 */] <2.646875f ? 
                    -0.07586615f : 
                     (data[1 /* c1 */] <2.9481933f ? 
                        -0.07529234f : 
                        -0.07522646f)) : 
                -0.0792118f) : 
            -0.009318573f) : 
         (data[0 /* c0 */] <6.3496094f ? 
            0.09208817f : 
             (data[2 /* c2 */] <5.5492187f ? 
                0.060898498f : 
                 (data[0 /* c0 */] <7.15f ? 
                    0.0865332f : 
                    0.09447025f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_10_class_0.score0(fdata);
    preds[2] += irisModel_Tree_10_class_1.score0(fdata);
    preds[3] += irisModel_Tree_10_class_2.score0(fdata);
  }
}
class irisModel_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
        0.08338036f : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8511772f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.65293f ? 
                 (data[1 /* c1 */] <2.6507812f ? 
                    -0.07469717f : 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <1.35f ? 
                        -0.074111246f : 
                        -0.07455221f)) : 
                 (Double.isNaN(data[0]) || data[0 /* c0 */] <6.353125f ? 
                    -0.07636928f : 
                    -0.07518721f)) : 
             (data[2 /* c2 */] <5.2470703f ? 
                -0.07468205f : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <5.8475485f ? 
                    -0.07406013f : 
                    -0.07390711f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_10_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.0504885f ? 
         (data[2 /* c2 */] <2.4477332f ? 
            -0.0740928f : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.6511719f ? 
                 (Double.isNaN(data[0]) || data[0 /* c0 */] <6.0566406f ? 
                     (data[1 /* c1 */] <2.546875f ? 
                        0.059149507f : 
                        0.085280225f) : 
                    0.09506196f) : 
                -0.023737218f)) : 
         (data[2 /* c2 */] <5.2509727f ? 
            -0.043726724f : 
             (data[3 /* c3 */] <1.95f ? 
                -0.0869365f : 
                 (data[1 /* c1 */] <3.15f ? 
                    -0.074107036f : 
                    -0.074978486f))));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_10_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[1 /* c1 */] <2.6492188f ? 
             (data[3 /* c3 */] <1.15f ? 
                -0.07462808f : 
                0.030054692f) : 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <6.3503904f ? 
                 (data[1 /* c1 */] <2.8527343f ? 
                    -0.038248964f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.1390624f ? 
                        -0.074091814f : 
                        -0.078532234f)) : 
                -0.060436826f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                0.096220456f : 
                0.08363737f) : 
            0.06118156f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_11_class_0.score0(fdata);
    preds[2] += irisModel_Tree_11_class_1.score0(fdata);
    preds[3] += irisModel_Tree_11_class_2.score0(fdata);
  }
}
class irisModel_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.150781f ? 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <0.25039062f ? 
                0.08094543f : 
                0.08094391f) : 
            0.08094544f) : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8484375f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.751953f ? 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <1.446875f ? 
                     (data[1 /* c1 */] <2.65625f ? 
                        -0.07368882f : 
                        -0.07320422f) : 
                    -0.073948696f) : 
                 (data[2 /* c2 */] <5.048259f ? 
                    -0.07546397f : 
                    -0.07480746f)) : 
             (data[2 /* c2 */] <5.2470703f ? 
                -0.073588684f : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <5.8475485f ? 
                    -0.07315305f : 
                    -0.07301548f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_11_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.0504885f ? 
         (data[2 /* c2 */] <2.4477332f ? 
             (data[2 /* c2 */] <1.3506229f ? 
                -0.07311558f : 
                 (data[1 /* c1 */] <3.1449218f ? 
                    -0.07311545f : 
                    -0.073115446f)) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.6511719f ? 
                 (Double.isNaN(data[0]) || data[0 /* c0 */] <6.2535157f ? 
                     (data[1 /* c1 */] <2.546875f ? 
                        0.05814443f : 
                        0.0831954f) : 
                    0.09397782f) : 
                -0.020281784f)) : 
         (data[2 /* c2 */] <5.5507956f ? 
            -0.051843822f : 
             (data[2 /* c2 */] <5.8512044f ? 
                -0.08452381f : 
                -0.07339542f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class irisModel_Tree_11_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.8488283f ? 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.05f ? 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.3484375f ? 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <2.8515625f ? 
                     (data[3 /* c3 */] <1.15f ? 
                        -0.07368257f : 
                        -0.07465538f) : 
                    -0.073101364f) : 
                0.0017986505f) : 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <5.5972657f ? 
                -0.07311547f : 
                -0.09344105f)) : 
         (data[2 /* c2 */] <5.149293f ? 
            0.042481244f : 
             (data[3 /* c3 */] <1.95f ? 
                0.096383f : 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                    0.08109649f : 
                    0.08208512f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class irisModel_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_12_class_0.score0(fdata);
    preds[2] += irisModel_Tree_12_class_1.score0(fdata);
    preds[3] += irisModel_Tree_12_class_2.score0(fdata);
  }
}
class irisModel_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.351172f ? 
             (data[0 /* c0 */] <4.7496223f ? 
                0.078905076f : 
                0.078906745f) : 
            0.07886995f) : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8511772f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.751953f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.073016934f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.072312415f : 
                        -0.072828695f)) : 
                 (data[2 /* c2 */] <5.048259f ? 
                    -0.07467623f : 
                    -0.0739727f)) : 
             (data[2 /* c2 */] <5.2470703f ? 
                -0.072860785f : 
                 (data[1 /* c1 */] <3.0535157f ? 
                    -0.07217335f : 
                    -0.0723054f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_12_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.0504885f ? 
         (data[3 /* c3 */] <0.80078125f ? 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.7484374f ? 
                 (data[0 /* c0 */] <4.751172f ? 
                    -0.07227224f : 
                    -0.07227211f) : 
                -0.07227496f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.6486664f ? 
                 (Double.isNaN(data[0]) || data[0 /* c0 */] <6.0566406f ? 
                     (Double.isNaN(data[0]) || data[0 /* c0 */] <5.650009f ? 
                        0.08090571f : 
                        0.05419832f) : 
                    0.08877758f) : 
                -0.019276496f)) : 
         (data[2 /* c2 */] <5.2509727f ? 
            -0.037722774f : 
             (data[3 /* c3 */] <1.95f ? 
                -0.084041625f : 
                 (data[1 /* c1 */] <3.15f ? 
                    -0.07228566f : 
                    -0.07305971f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_12_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[1 /* c1 */] <2.6492188f ? 
             (data[3 /* c3 */] <1.15f ? 
                -0.072898775f : 
                0.031418543f) : 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <6.452344f ? 
                 (data[1 /* c1 */] <2.8527343f ? 
                    -0.03568886f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.235156f ? 
                        -0.072338685f : 
                        -0.07613393f)) : 
                -0.05652238f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                0.0908799f : 
                0.07904971f) : 
            0.052898318f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_13_class_0.score0(fdata);
    preds[2] += irisModel_Tree_13_class_1.score0(fdata);
    preds[3] += irisModel_Tree_13_class_2.score0(fdata);
  }
}
class irisModel_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.7484374f ? 
             (data[2 /* c2 */] <1.45f ? 
                0.077188134f : 
                0.07718909f) : 
            0.07715763f) : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8511772f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.751953f ? 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <1.446875f ? 
                     (data[1 /* c1 */] <2.65625f ? 
                        -0.07206539f : 
                        -0.07160559f) : 
                    -0.0723129f) : 
                 (data[2 /* c2 */] <5.048259f ? 
                    -0.07378008f : 
                    -0.073489755f)) : 
             (data[2 /* c2 */] <5.2470703f ? 
                -0.07203316f : 
                 (data[1 /* c1 */] <3.0535157f ? 
                    -0.07145689f : 
                    -0.07167903f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_13_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.0504885f ? 
         (data[2 /* c2 */] <2.4477332f ? 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.7484374f ? 
                -0.07154323f : 
                -0.07154543f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.6511719f ? 
                 (Double.isNaN(data[0]) || data[0 /* c0 */] <6.0566406f ? 
                     (data[1 /* c1 */] <2.546875f ? 
                        0.046459906f : 
                        0.07894422f) : 
                    0.086251f) : 
                -0.015971819f)) : 
         (data[2 /* c2 */] <5.5507956f ? 
            -0.046416953f : 
             (data[2 /* c2 */] <5.8512044f ? 
                -0.08200131f : 
                -0.071792625f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_13_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.05f ? 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.4507812f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.246875f ? 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <2.8515625f ? 
                        -0.07233703f : 
                        -0.07154494f) : 
                    -0.073873624f) : 
                0.035171617f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <0.44882813f ? 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.75f ? 
                    -0.071542874f : 
                    -0.07151386f) : 
                -0.09513423f)) : 
         (data[0 /* c0 */] <6.3496094f ? 
            0.076844946f : 
             (data[0 /* c0 */] <6.7493196f ? 
                0.05045262f : 
                0.08288886f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class irisModel_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_14_class_0.score0(fdata);
    preds[2] += irisModel_Tree_14_class_1.score0(fdata);
    preds[3] += irisModel_Tree_14_class_2.score0(fdata);
  }
}
class irisModel_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <0.25f ? 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.452539f ? 
                 (data[1 /* c1 */] <3.1503692f ? 
                    0.07573484f : 
                    0.07573487f) : 
                0.07572686f) : 
            0.07570941f) : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8484375f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.751953f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.07163754f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.07095798f : 
                        -0.07135881f)) : 
                 (data[2 /* c2 */] <5.048259f ? 
                    -0.07317157f : 
                    -0.07281696f)) : 
             (data[2 /* c2 */] <5.2470703f ? 
                -0.071404375f : 
                 (data[1 /* c1 */] <3.0535157f ? 
                    -0.070861295f : 
                    -0.07105991f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_14_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[3 /* c3 */] <0.80092776f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.553125f ? 
                 (data[2 /* c2 */] <1.3500245f ? 
                    -0.07091283f : 
                    -0.07091241f) : 
                -0.07091362f) : 
             (data[1 /* c1 */] <2.646875f ? 
                0.031054726f : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.6515627f ? 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <1.35f ? 
                        0.07588944f : 
                        0.07839879f) : 
                    0.0642429f))) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                -0.07899884f : 
                -0.071086496f) : 
            -0.01626922f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class irisModel_Tree_14_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[1 /* c1 */] <2.6492188f ? 
             (data[3 /* c3 */] <1.15f ? 
                -0.07152137f : 
                0.032095015f) : 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.45f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <3.7492187f ? 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <0.3515625f ? 
                        -0.070907734f : 
                        -0.07087948f) : 
                    -0.07140975f) : 
                -0.04912151f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                0.08649523f : 
                0.07598635f) : 
            0.045223244f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_15_class_0.score0(fdata);
    preds[2] += irisModel_Tree_15_class_1.score0(fdata);
    preds[3] += irisModel_Tree_15_class_2.score0(fdata);
  }
}
class irisModel_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <0.25f ? 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.452539f ? 
                 (data[1 /* c1 */] <3.1503692f ? 
                    0.07449794f : 
                    0.074497975f) : 
                0.07449112f) : 
            0.0744761f) : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8484375f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.751953f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.07117247f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.07043393f : 
                        -0.070785254f)) : 
                 (data[2 /* c2 */] <5.048259f ? 
                    -0.07250878f : 
                    -0.07227436f)) : 
             (data[2 /* c2 */] <5.2470703f ? 
                -0.07080322f : 
                 (data[1 /* c1 */] <3.0535157f ? 
                    -0.07031997f : 
                    -0.07058027f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_15_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.0504885f ? 
         (data[2 /* c2 */] <2.4477332f ? 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.7484374f ? 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.4542236f ? 
                     (data[0 /* c0 */] <4.75f ? 
                        -0.070365325f : 
                        -0.07036547f) : 
                    -0.070365705f) : 
                -0.07036666f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.6511719f ? 
                 (Double.isNaN(data[0]) || data[0 /* c0 */] <6.155078f ? 
                     (data[1 /* c1 */] <2.546875f ? 
                        0.04015014f : 
                        0.076440185f) : 
                    0.08385187f) : 
                -0.010216988f)) : 
         (data[2 /* c2 */] <5.5507956f ? 
            -0.042304922f : 
             (data[2 /* c2 */] <5.8512044f ? 
                -0.0817201f : 
                -0.07073893f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_15_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.05f ? 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.4507812f ? 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <2.8515625f ? 
                     (data[2 /* c2 */] <3.9617188f ? 
                        -0.07103479f : 
                        -0.07231387f) : 
                    -0.07078248f) : 
                0.03220003f) : 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.7998047f ? 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <0.25273436f ? 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <3.4453125f ? 
                        -0.070364974f : 
                        -0.07035846f) : 
                    -0.07034087f) : 
                -0.095914155f)) : 
         (data[0 /* c0 */] <6.3496094f ? 
            0.07248336f : 
             (data[2 /* c2 */] <5.5492187f ? 
                0.0354972f : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <5.950232f ? 
                    0.08370972f : 
                    0.074812524f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}


class irisModel_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_16_class_0.score0(fdata);
    preds[2] += irisModel_Tree_16_class_1.score0(fdata);
    preds[3] += irisModel_Tree_16_class_2.score0(fdata);
  }
}
class irisModel_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5501541f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <5.1496096f ? 
                 (data[0 /* c0 */] <4.751355f ? 
                    0.0734396f : 
                    0.07344173f) : 
                0.07343f) : 
            0.07341172f) : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8484375f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.751953f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.07072253f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.06994218f : 
                        -0.0702562f)) : 
                 (data[2 /* c2 */] <5.048259f ? 
                    -0.072047144f : 
                    -0.07173982f)) : 
             (data[2 /* c2 */] <5.3460937f ? 
                -0.07033416f : 
                 (data[1 /* c1 */] <3.0535157f ? 
                    -0.06984942f : 
                    -0.07006376f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_16_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.0504885f ? 
         (data[2 /* c2 */] <2.4477332f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5513828f ? 
                 (data[2 /* c2 */] <1.3489219f ? 
                    -0.069891006f : 
                     (data[0 /* c0 */] <5.05f ? 
                        -0.06989058f : 
                        -0.0698909f)) : 
                -0.06989206f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.6511719f ? 
                 (Double.isNaN(data[0]) || data[0 /* c0 */] <6.155078f ? 
                     (data[1 /* c1 */] <2.546875f ? 
                        0.036883038f : 
                        0.07526598f) : 
                    0.08210223f) : 
                -0.009025012f)) : 
         (data[2 /* c2 */] <5.2509727f ? 
            -0.026273916f : 
             (data[3 /* c3 */] <1.95f ? 
                -0.08138589f : 
                 (data[1 /* c1 */] <3.15f ? 
                    -0.06995413f : 
                    -0.070820995f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_16_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.05f ? 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.4507812f ? 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <2.8515625f ? 
                     (data[2 /* c2 */] <3.9617188f ? 
                        -0.070563056f : 
                        -0.07161725f) : 
                    -0.07024942f) : 
                0.0315381f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <0.44882813f ? 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.75f ? 
                     (data[0 /* c0 */] <4.8484373f ? 
                        -0.06988241f : 
                        -0.06989045f) : 
                    -0.069863506f) : 
                -0.09531962f)) : 
         (data[0 /* c0 */] <6.3496094f ? 
            0.06835541f : 
             (data[0 /* c0 */] <6.7493196f ? 
                0.03965777f : 
                0.07932562f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}


class irisModel_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_17_class_0.score0(fdata);
    preds[2] += irisModel_Tree_17_class_1.score0(fdata);
    preds[3] += irisModel_Tree_17_class_2.score0(fdata);
  }
}
class irisModel_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <1.553125f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <5.1496096f ? 
                 (data[1 /* c1 */] <3.1449218f ? 
                    0.07253426f : 
                    0.072537296f) : 
                0.07252698f) : 
            0.07250031f) : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8511772f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.751953f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.070328385f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.06951645f : 
                        -0.069795705f)) : 
                 (data[2 /* c2 */] <5.048259f ? 
                    -0.07164582f : 
                    -0.071245566f)) : 
             (data[2 /* c2 */] <5.3460937f ? 
                -0.06993436f : 
                 (data[1 /* c1 */] <3.0535157f ? 
                    -0.06946109f : 
                    -0.06965383f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_17_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.0504885f ? 
         (data[3 /* c3 */] <0.80078125f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.546875f ? 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.555078f ? 
                    -0.06947829f : 
                    -0.069478795f) : 
                -0.06947989f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.6486664f ? 
                 (data[1 /* c1 */] <2.4484375f ? 
                    0.031807557f : 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
                        0.07376349f : 
                        0.082222976f)) : 
                -0.007897814f)) : 
         (data[1 /* c1 */] <2.9492188f ? 
            -0.031840447f : 
             (data[3 /* c3 */] <2.1498046f ? 
                -0.075808495f : 
                -0.070317425f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class irisModel_Tree_17_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.05f ? 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.4507812f ? 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <2.8515625f ? 
                     (data[2 /* c2 */] <3.9617188f ? 
                        -0.07015264f : 
                        -0.07101535f) : 
                    -0.069787174f) : 
                0.03098612f) : 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.7998047f ? 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <0.25273436f ? 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <3.4453125f ? 
                        -0.069478065f : 
                        -0.06947318f) : 
                    -0.069449835f) : 
                -0.09483487f)) : 
         (data[0 /* c0 */] <6.3496094f ? 
            0.064626925f : 
             (data[2 /* c2 */] <5.5492187f ? 
                0.02712711f : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <5.950232f ? 
                    0.080062635f : 
                    0.0727227f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}


class irisModel_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_18_class_0.score0(fdata);
    preds[2] += irisModel_Tree_18_class_1.score0(fdata);
    preds[3] += irisModel_Tree_18_class_2.score0(fdata);
  }
}
class irisModel_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <1.553125f ? 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.5509765f ? 
                 (data[1 /* c1 */] <3.150273f ? 
                    0.07175688f : 
                    0.0717601f) : 
                0.071751185f) : 
            0.07171876f) : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8511772f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.751953f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.06997018f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.06914996f : 
                        -0.069390275f)) : 
                 (data[2 /* c2 */] <5.048259f ? 
                    -0.07130233f : 
                    -0.07079472f)) : 
             (data[2 /* c2 */] <5.551758f ? 
                -0.069567226f : 
                -0.06917847f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_18_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[3 /* c3 */] <0.80092776f ? 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <0.25058994f ? 
                 (data[0 /* c0 */] <4.8507814f ? 
                    -0.069120094f : 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <3.4484375f ? 
                        -0.06911972f : 
                        -0.06911998f)) : 
                -0.06912098f) : 
             (data[1 /* c1 */] <2.646875f ? 
                0.019860066f : 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <1.4511719f ? 
                     (data[2 /* c2 */] <4.253125f ? 
                        0.07192202f : 
                        0.073150486f) : 
                    0.06339347f))) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                -0.076436006f : 
                -0.069441564f) : 
            7.794459E-5f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_18_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[1 /* c1 */] <2.6492188f ? 
             (data[3 /* c3 */] <1.15f ? 
                -0.06984917f : 
                0.034098938f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.24375f ? 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <2.748584f ? 
                        -0.069107f : 
                        -0.069262035f) : 
                    -0.07045288f) : 
                -0.04510603f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                0.080830604f : 
                0.072252244f) : 
            0.031687923f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_19_class_0.score0(fdata);
    preds[2] += irisModel_Tree_19_class_1.score0(fdata);
    preds[3] += irisModel_Tree_19_class_2.score0(fdata);
  }
}
class irisModel_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5501541f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <5.1496096f ? 
                 (data[1 /* c1 */] <3.1449218f ? 
                    0.07108788f : 
                    0.071090825f) : 
                0.07108311f) : 
            0.0710551f) : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8484375f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.751953f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.06969087f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.068858914f : 
                        -0.06906248f)) : 
                 (data[2 /* c2 */] <5.048259f ? 
                    -0.07085526f : 
                    -0.070473775f)) : 
             (data[2 /* c2 */] <5.551758f ? 
                -0.06922013f : 
                -0.068902135f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_19_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.0504885f ? 
         (data[2 /* c2 */] <2.4477332f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5513828f ? 
                 (Double.isNaN(data[0]) || data[0 /* c0 */] <5.1496096f ? 
                    -0.06880775f : 
                    -0.06880809f) : 
                -0.06880911f) : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <2.946875f ? 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <1.4492188f ? 
                     (data[1 /* c1 */] <2.646875f ? 
                        0.07321927f : 
                        0.07195909f) : 
                    -0.033205755f) : 
                0.07894455f)) : 
         (data[2 /* c2 */] <5.2509727f ? 
            -0.018035945f : 
             (data[3 /* c3 */] <1.95f ? 
                -0.079716496f : 
                 (data[1 /* c1 */] <3.15f ? 
                    -0.068905585f : 
                    -0.0697903f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_19_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.05f ? 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.4507812f ? 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <2.8515625f ? 
                     (data[2 /* c2 */] <3.9617188f ? 
                        -0.06949595f : 
                        -0.0702884f) : 
                    -0.06904244f) : 
                0.028280023f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <0.44882813f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5484375f ? 
                     (Double.isNaN(data[0]) || data[0 /* c0 */] <5.14375f ? 
                        -0.06880767f : 
                        -0.06880015f) : 
                    -0.06878322f) : 
                -0.09668528f)) : 
         (data[0 /* c0 */] <6.3496094f ? 
            0.06126545f : 
             (data[2 /* c2 */] <5.5492187f ? 
                0.019629834f : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <5.950232f ? 
                    0.07940828f : 
                    0.07144527f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}


class irisModel_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_20_class_0.score0(fdata);
    preds[2] += irisModel_Tree_20_class_1.score0(fdata);
    preds[3] += irisModel_Tree_20_class_2.score0(fdata);
  }
}
class irisModel_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5501541f ? 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.5509765f ? 
                 (data[1 /* c1 */] <3.150273f ? 
                    0.07051032f : 
                    0.07051324f) : 
                0.070506565f) : 
            0.07047487f) : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8484375f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.751953f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.06934927f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.0685765f : 
                        -0.06878419f)) : 
                 (data[2 /* c2 */] <5.048259f ? 
                    -0.07053195f : 
                    -0.07010827f)) : 
             (data[2 /* c2 */] <5.551758f ? 
                -0.06898173f : 
                -0.06861431f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_20_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.0504885f ? 
         (data[2 /* c2 */] <2.4477332f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5513828f ? 
                 (Double.isNaN(data[0]) || data[0 /* c0 */] <5.05f ? 
                    -0.068536066f : 
                    -0.06853626f) : 
                -0.0685374f) : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <2.946875f ? 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <1.4492188f ? 
                     (data[1 /* c1 */] <2.646875f ? 
                        0.072347686f : 
                        0.07126563f) : 
                    -0.029695967f) : 
                0.07497661f)) : 
         (data[1 /* c1 */] <2.9492188f ? 
            -0.023516411f : 
             (data[3 /* c3 */] <2.1498046f ? 
                -0.07481898f : 
                -0.0694065f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class irisModel_Tree_20_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[1 /* c1 */] <2.6492188f ? 
             (data[3 /* c3 */] <1.15f ? 
                -0.06921012f : 
                0.030439872f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.24375f ? 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <2.748584f ? 
                        -0.068524584f : 
                        -0.068638586f) : 
                    -0.06953664f) : 
                -0.042217452f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                0.078545325f : 
                0.07100851f) : 
            0.026762662f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_21_class_0.score0(fdata);
    preds[2] += irisModel_Tree_21_class_1.score0(fdata);
    preds[3] += irisModel_Tree_21_class_2.score0(fdata);
  }
}
class irisModel_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5501541f ? 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.5509765f ? 
                 (data[1 /* c1 */] <3.150273f ? 
                    0.07001129f : 
                    0.07001392f) : 
                0.07000813f) : 
            0.06998066f) : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8484375f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.751953f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.06904966f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.06833172f : 
                        -0.06854828f)) : 
                 (data[2 /* c2 */] <5.048259f ? 
                    -0.07011077f : 
                    -0.06994567f)) : 
             (data[2 /* c2 */] <5.551758f ? 
                -0.068710424f : 
                -0.0684099f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_21_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.1484375f ? 
         (data[2 /* c2 */] <2.4503326f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.54954f ? 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.555078f ? 
                    -0.06829934f : 
                    -0.068299554f) : 
                -0.06830043f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.753125f ? 
                 (Double.isNaN(data[0]) || data[0 /* c0 */] <6.351953f ? 
                     (data[1 /* c1 */] <2.546875f ? 
                        0.017435549f : 
                        0.06057606f) : 
                    0.09486628f) : 
                -0.026610985f)) : 
         (data[3 /* c3 */] <1.9492188f ? 
            -0.07803433f : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                -0.06861776f : 
                -0.069173366f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class irisModel_Tree_21_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (data[0 /* c0 */] <4.950391f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.449414f ? 
                -0.06829697f : 
                0.04145419f) : 
             (data[1 /* c1 */] <2.5484376f ? 
                -0.079750255f : 
                 (data[1 /* c1 */] <3.0547242f ? 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.553125f ? 
                        -0.069640264f : 
                        0.040805306f) : 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <0.45625f ? 
                        -0.06829301f : 
                        -0.095301546f)))) : 
         (data[0 /* c0 */] <6.599219f ? 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <2.846875f ? 
                0.05400995f : 
                0.071808554f) : 
             (data[0 /* c0 */] <7.000632f ? 
                0.0067419657f : 
                0.077420294f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}


class irisModel_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_22_class_0.score0(fdata);
    preds[2] += irisModel_Tree_22_class_1.score0(fdata);
    preds[3] += irisModel_Tree_22_class_2.score0(fdata);
  }
}
class irisModel_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
         (data[0 /* c0 */] <4.950391f ? 
            0.069645986f : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <0.25039062f ? 
                0.06957978f : 
                0.06955075f)) : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8511772f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.751953f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.068854995f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.068130255f : 
                        -0.06831028f)) : 
                 (data[2 /* c2 */] <5.048259f ? 
                    -0.069909036f : 
                    -0.06958372f)) : 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <5.7498045f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <5.3514585f ? 
                    -0.06851654f : 
                    -0.06834988f) : 
                -0.06815542f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_22_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.1484375f ? 
         (data[0 /* c0 */] <5.4496093f ? 
             (data[0 /* c0 */] <4.9489007f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4511719f ? 
                    -0.06809297f : 
                    -0.07946272f) : 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <0.35f ? 
                    -0.068092994f : 
                    0.021160495f)) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.753125f ? 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <1.4497802f ? 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <2.95625f ? 
                        0.07080958f : 
                        0.029054476f) : 
                    0.051677044f) : 
                -0.025036126f)) : 
         (data[3 /* c3 */] <1.9492188f ? 
            -0.076749414f : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                -0.068420954f : 
                -0.06889453f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_22_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (data[0 /* c0 */] <4.950391f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.449414f ? 
                -0.06809089f : 
                0.041161638f) : 
             (data[1 /* c1 */] <2.5484376f ? 
                -0.07886271f : 
                 (data[1 /* c1 */] <3.0547242f ? 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.553125f ? 
                        -0.069292486f : 
                        0.03945984f) : 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <0.45625f ? 
                        -0.06808745f : 
                        -0.09547569f)))) : 
         (data[0 /* c0 */] <6.3496094f ? 
            0.05360601f : 
             (data[2 /* c2 */] <5.5492187f ? 
                0.011017752f : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <5.950232f ? 
                    0.07648601f : 
                    0.06987538f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}


class irisModel_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_23_class_0.score0(fdata);
    preds[2] += irisModel_Tree_23_class_1.score0(fdata);
    preds[3] += irisModel_Tree_23_class_2.score0(fdata);
  }
}
class irisModel_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
         (data[2 /* c2 */] <1.449414f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <4.950391f ? 
                0.069204666f : 
                0.0692518f) : 
             (data[0 /* c0 */] <5.05f ? 
                0.06941025f : 
                0.06924698f)) : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8511772f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.751953f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.06865932f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.0679599f : 
                        -0.06813143f)) : 
                 (data[2 /* c2 */] <5.048259f ? 
                    -0.06974164f : 
                    -0.069271505f)) : 
             (data[2 /* c2 */] <5.551758f ? 
                -0.0683381f : 
                -0.06802247f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_23_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.1484375f ? 
         (data[3 /* c3 */] <0.80078125f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <5.349414f ? 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <0.25039062f ? 
                     (data[2 /* c2 */] <1.45f ? 
                        -0.06791286f : 
                        -0.06790263f) : 
                    -0.06796921f) : 
                -0.06801352f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.7471939f ? 
                 (Double.isNaN(data[0]) || data[0 /* c0 */] <6.351953f ? 
                     (data[1 /* c1 */] <2.546875f ? 
                        0.011228219f : 
                        0.057409327f) : 
                    0.09408556f) : 
                -0.023768235f)) : 
         (data[3 /* c3 */] <1.9492188f ? 
            -0.07555789f : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                -0.06825417f : 
                -0.06864036f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_23_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (data[0 /* c0 */] <4.950391f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.449414f ? 
                -0.06791106f : 
                0.036980435f) : 
             (data[1 /* c1 */] <2.5484376f ? 
                -0.07774817f : 
                 (data[1 /* c1 */] <3.0547242f ? 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.553125f ? 
                        -0.06901109f : 
                        0.037783664f) : 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <0.45625f ? 
                        -0.06790725f : 
                        -0.095249094f)))) : 
         (data[0 /* c0 */] <6.599219f ? 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <2.846875f ? 
                0.05022763f : 
                0.0708298f) : 
             (data[0 /* c0 */] <7.000632f ? 
                0.0010440905f : 
                0.0750918f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}


class irisModel_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_24_class_0.score0(fdata);
    preds[2] += irisModel_Tree_24_class_1.score0(fdata);
    preds[3] += irisModel_Tree_24_class_2.score0(fdata);
  }
}
class irisModel_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
         (data[0 /* c0 */] <4.950391f ? 
            0.0690559f : 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <5.3503046f ? 
                0.06888843f : 
                0.068962924f)) : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <5.851367f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.74869f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.06850571f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.067806326f : 
                        -0.067948915f)) : 
                 (data[3 /* c3 */] <1.8496094f ? 
                    -0.06939435f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <5.346875f ? 
                        -0.068179384f : 
                        -0.06801682f))) : 
            -0.06781543f));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class irisModel_Tree_24_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.1484375f ? 
         (data[0 /* c0 */] <5.4496093f ? 
             (data[0 /* c0 */] <4.9489007f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4511719f ? 
                    -0.06775578f : 
                    -0.075066015f) : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.546875f ? 
                    -0.06777505f : 
                    0.02180203f)) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.753125f ? 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <1.4497802f ? 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <2.95625f ? 
                        0.070021346f : 
                        0.027375327f) : 
                    0.04645977f) : 
                -0.022506619f)) : 
         (data[3 /* c3 */] <1.9492188f ? 
            -0.07454015f : 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <5.751172f ? 
                -0.068440594f : 
                -0.06801691f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_24_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[1 /* c1 */] <2.6492188f ? 
             (data[3 /* c3 */] <1.15f ? 
                -0.06846624f : 
                0.033351813f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.24375f ? 
                     (data[0 /* c0 */] <4.953906f ? 
                        -0.067958f : 
                        -0.067770556f) : 
                    -0.06886489f) : 
                -0.039689966f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                0.07566907f : 
                0.069377944f) : 
            0.014049458f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_25_class_0.score0(fdata);
    preds[2] += irisModel_Tree_25_class_1.score0(fdata);
    preds[3] += irisModel_Tree_25_class_2.score0(fdata);
  }
}
class irisModel_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (data[2 /* c2 */] <1.4508995f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <4.950391f ? 
                0.06859628f : 
                0.0686641f) : 
             (data[0 /* c0 */] <5.05f ? 
                0.068860695f : 
                0.06867489f)) : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8484375f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.751953f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.068347104f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.06767465f : 
                        -0.06781354f)) : 
                 (data[2 /* c2 */] <5.048259f ? 
                    -0.06937455f : 
                    -0.068853274f)) : 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <5.7498045f ? 
                 (Double.isNaN(data[0]) || data[0 /* c0 */] <6.4535155f ? 
                    -0.06789131f : 
                    -0.068032324f) : 
                -0.067697935f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_25_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.0504885f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <6.251172f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <5.4508867f ? 
                 (data[0 /* c0 */] <4.947374f ? 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4648438f ? 
                        -0.06761851f : 
                        -0.0719116f) : 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <0.35f ? 
                        -0.06763557f : 
                        0.020600384f)) : 
                 (Double.isNaN(data[0]) || data[0 /* c0 */] <5.9483447f ? 
                     (data[2 /* c2 */] <3.9609375f ? 
                        0.030530233f : 
                        0.07304344f) : 
                    -0.019977694f)) : 
            0.07497337f) : 
         (data[1 /* c1 */] <2.9492188f ? 
            -0.016655115f : 
             (data[3 /* c3 */] <2.1498046f ? 
                -0.072200365f : 
                -0.068345435f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_25_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (data[0 /* c0 */] <4.950391f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.449414f ? 
                -0.06761691f : 
                0.037899584f) : 
             (data[1 /* c1 */] <2.5484376f ? 
                -0.07718177f : 
                 (data[1 /* c1 */] <3.0547242f ? 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.553125f ? 
                        -0.06859597f : 
                        0.036823265f) : 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <0.45625f ? 
                        -0.06761396f : 
                        -0.09755243f)))) : 
         (data[0 /* c0 */] <6.3496094f ? 
            0.050712854f : 
             (data[0 /* c0 */] <6.7493196f ? 
                0.01087913f : 
                0.07277838f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class irisModel_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_26_class_0.score0(fdata);
    preds[2] += irisModel_Tree_26_class_1.score0(fdata);
    preds[3] += irisModel_Tree_26_class_2.score0(fdata);
  }
}
class irisModel_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (data[2 /* c2 */] <1.4508995f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <4.950391f ? 
                0.06835055f : 
                0.0684511f) : 
             (data[0 /* c0 */] <5.05f ? 
                0.068683274f : 
                0.068465196f)) : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <5.8488016f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.7471166f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.068233736f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.06756258f : 
                        -0.067706786f)) : 
                 (data[3 /* c3 */] <1.8496094f ? 
                    -0.068999745f : 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <3.04375f ? 
                        -0.06776164f : 
                        -0.06790349f))) : 
            -0.06757401f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_26_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.1484375f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.2992187f ? 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <0.80078125f ? 
                     (Double.isNaN(data[0]) || data[0 /* c0 */] <5.342969f ? 
                        -0.06753517f : 
                        -0.06771349f) : 
                    0.06951654f) : 
                -0.046082344f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.5464844f ? 
                 (data[1 /* c1 */] <2.846875f ? 
                    -0.008588991f : 
                    0.06994643f) : 
                0.051561233f)) : 
         (data[3 /* c3 */] <1.9492188f ? 
            -0.07346821f : 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <5.751172f ? 
                -0.068122305f : 
                -0.06774832f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class irisModel_Tree_26_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (data[0 /* c0 */] <4.950391f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.449414f ? 
                -0.06749742f : 
                0.034083817f) : 
             (data[1 /* c1 */] <2.5484376f ? 
                -0.07598139f : 
                 (data[1 /* c1 */] <3.0547242f ? 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <1.4507812f ? 
                        -0.068278514f : 
                        0.03546459f) : 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <0.45625f ? 
                        -0.06749441f : 
                        -0.09468644f)))) : 
         (data[0 /* c0 */] <6.3496094f ? 
            0.04728368f : 
             (data[2 /* c2 */] <5.5492187f ? 
                4.973184E-4f : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <5.950232f ? 
                    0.07323172f : 
                    0.0685695f))));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}


class irisModel_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_27_class_0.score0(fdata);
    preds[2] += irisModel_Tree_27_class_1.score0(fdata);
    preds[3] += irisModel_Tree_27_class_2.score0(fdata);
  }
}
class irisModel_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
         (data[2 /* c2 */] <1.449414f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <4.950391f ? 
                0.06813663f : 
                0.06822423f) : 
             (data[0 /* c0 */] <5.05f ? 
                0.06851435f : 
                0.06823541f)) : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <5.851367f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.74869f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.06807694f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.06746031f : 
                        -0.067610905f)) : 
                 (data[3 /* c3 */] <1.8496094f ? 
                    -0.06881605f : 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <3.04375f ? 
                        -0.06766422f : 
                        -0.06778904f))) : 
            -0.067461684f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_27_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[0 /* c0 */] <5.4496093f ? 
             (data[0 /* c0 */] <4.9489007f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4511719f ? 
                    -0.06739423f : 
                    -0.06672145f) : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.546875f ? 
                    -0.067422844f : 
                    0.021673739f)) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <2.9476562f ? 
                     (data[3 /* c3 */] <1.25f ? 
                        0.069214515f : 
                        0.04361307f) : 
                    0.023163447f) : 
                0.034222323f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                -0.072977014f : 
                -0.06769201f) : 
            0.023268852f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_27_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[1 /* c1 */] <2.6492188f ? 
             (data[3 /* c3 */] <1.15f ? 
                -0.068233825f : 
                0.033726815f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
                 (Double.isNaN(data[0]) || data[0 /* c0 */] <5.953906f ? 
                     (data[0 /* c0 */] <4.958978f ? 
                        -0.067668706f : 
                        -0.06741246f) : 
                    -0.06848187f) : 
                -0.03974777f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                0.074334085f : 
                0.06862776f) : 
            0.007977379f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_28_class_0.score0(fdata);
    preds[2] += irisModel_Tree_28_class_1.score0(fdata);
    preds[3] += irisModel_Tree_28_class_2.score0(fdata);
  }
}
class irisModel_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (data[2 /* c2 */] <1.4508995f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <4.950391f ? 
                0.06795011f : 
                0.06805411f) : 
             (data[0 /* c0 */] <5.05f ? 
                0.06829422f : 
                0.06807547f)) : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <5.8488016f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.7471166f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.06796775f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.067376f : 
                        -0.067520335f)) : 
                 (data[3 /* c3 */] <1.8496094f ? 
                    -0.068654895f : 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <3.04375f ? 
                        -0.06753893f : 
                        -0.06769259f))) : 
            -0.06738995f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_28_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (data[0 /* c0 */] <5.4496093f ? 
             (data[0 /* c0 */] <4.9489007f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4511719f ? 
                    -0.06730289f : 
                    -0.063874915f) : 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <0.35f ? 
                    -0.067328036f : 
                    0.020534605f)) : 
             (data[1 /* c1 */] <2.646875f ? 
                0.07578626f : 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.0509155f ? 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.553125f ? 
                        0.06886056f : 
                        -0.018539732f) : 
                    0.07575202f))) : 
         (data[0 /* c0 */] <6.599219f ? 
             (data[2 /* c2 */] <5.1484375f ? 
                -0.033221014f : 
                -0.06996322f) : 
             (data[0 /* c0 */] <7.000632f ? 
                0.04046703f : 
                -0.07214952f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_28_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.046875f ? 
                 (data[1 /* c1 */] <2.646875f ? 
                    -0.0683199f : 
                     (data[0 /* c0 */] <4.9445314f ? 
                        -0.06754258f : 
                        -0.067310706f)) : 
                0.038220193f) : 
             (data[3 /* c3 */] <1.4507812f ? 
                -0.068248406f : 
                -0.028553553f)) : 
         (data[0 /* c0 */] <6.3496094f ? 
            0.045539033f : 
             (data[2 /* c2 */] <5.5492187f ? 
                -0.002705487f : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <5.950232f ? 
                    0.07290638f : 
                    0.068226404f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class irisModel_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_29_class_0.score0(fdata);
    preds[2] += irisModel_Tree_29_class_1.score0(fdata);
    preds[3] += irisModel_Tree_29_class_2.score0(fdata);
  }
}
class irisModel_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
         (data[2 /* c2 */] <1.449414f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <4.950391f ? 
                0.06778758f : 
                0.06793022f) : 
             (data[0 /* c0 */] <5.05f ? 
                0.06810005f : 
                0.06794422f)) : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <5.851367f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.74869f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.06786406f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.067287855f : 
                        -0.06743648f)) : 
                 (data[3 /* c3 */] <1.8496094f ? 
                    -0.068478055f : 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <3.04375f ? 
                        -0.06746333f : 
                        -0.06760251f))) : 
            -0.067300774f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_29_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.1484375f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.2992187f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <2.4434083f ? 
                     (Double.isNaN(data[0]) || data[0 /* c0 */] <5.342969f ? 
                        -0.067276694f : 
                        -0.06751221f) : 
                    0.06887026f) : 
                -0.040762864f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.5464844f ? 
                 (data[1 /* c1 */] <2.846875f ? 
                    -0.014055559f : 
                    0.06910252f) : 
                0.050090276f)) : 
         (data[3 /* c3 */] <1.9492188f ? 
            -0.07240402f : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                -0.06757144f : 
                -0.06789557f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}

class irisModel_Tree_29_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[1 /* c1 */] <2.6492188f ? 
             (data[3 /* c3 */] <1.15f ? 
                -0.06813544f : 
                0.032902297f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.24375f ? 
                     (data[0 /* c0 */] <4.953906f ? 
                        -0.06743243f : 
                        -0.06725617f) : 
                    -0.068207994f) : 
                -0.03877839f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                0.07334694f : 
                0.06827825f) : 
            0.0058911834f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_30_class_0.score0(fdata);
    preds[2] += irisModel_Tree_30_class_1.score0(fdata);
    preds[3] += irisModel_Tree_30_class_2.score0(fdata);
  }
}
class irisModel_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
         (data[2 /* c2 */] <1.449414f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <4.950391f ? 
                0.067645855f : 
                0.067770444f) : 
             (data[0 /* c0 */] <5.05f ? 
                0.06791852f : 
                0.06778263f)) : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <5.851367f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.74869f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.06774549f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.0672185f : 
                        -0.067371316f)) : 
                 (data[3 /* c3 */] <1.8496094f ? 
                    -0.06833752f : 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <3.04375f ? 
                        -0.06736292f : 
                        -0.06752524f))) : 
            -0.06724664f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_30_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[0 /* c0 */] <5.4496093f ? 
             (data[0 /* c0 */] <4.9489007f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4511719f ? 
                    -0.0671533f : 
                    -0.061904628f) : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.546875f ? 
                    -0.067185156f : 
                    0.02219597f)) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <2.9476562f ? 
                     (data[3 /* c3 */] <1.25f ? 
                        0.06860011f : 
                        0.041272234f) : 
                    0.018256586f) : 
                0.030103404f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                -0.07214518f : 
                -0.067425594f) : 
            0.022105945f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_30_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.046875f ? 
                 (data[1 /* c1 */] <2.646875f ? 
                    -0.06807479f : 
                     (data[0 /* c0 */] <4.9445314f ? 
                        -0.06733623f : 
                        -0.06716104f)) : 
                0.034356818f) : 
             (data[3 /* c3 */] <1.4507812f ? 
                -0.06806513f : 
                -0.026370369f)) : 
         (data[0 /* c0 */] <6.599219f ? 
             (data[2 /* c2 */] <5.1484375f ? 
                0.03755621f : 
                0.069998816f) : 
             (data[0 /* c0 */] <7.000632f ? 
                -0.013751328f : 
                0.07215256f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class irisModel_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_31_class_0.score0(fdata);
    preds[2] += irisModel_Tree_31_class_1.score0(fdata);
    preds[3] += irisModel_Tree_31_class_2.score0(fdata);
  }
}
class irisModel_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5501541f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <5.1496096f ? 
                 (data[1 /* c1 */] <3.1449218f ? 
                    0.067648254f : 
                    0.06753278f) : 
                0.06770018f) : 
            0.067773f) : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <5.8488016f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.7471166f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.06767066f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.06716114f : 
                        -0.067304716f)) : 
                 (data[3 /* c3 */] <1.8496094f ? 
                    -0.06819929f : 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <3.04375f ? 
                        -0.06729888f : 
                        -0.06745076f))) : 
            -0.06717879f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_31_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.1484375f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <6.4480467f ? 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.6498047f ? 
                 (data[1 /* c1 */] <2.75f ? 
                     (data[1 /* c1 */] <2.4511719f ? 
                        -0.0035338863f : 
                        0.10525022f) : 
                     (data[1 /* c1 */] <2.9433594f ? 
                        -0.026860565f : 
                        -0.011845723f)) : 
                -0.030307338f) : 
            0.06607052f) : 
         (data[3 /* c3 */] <1.9492188f ? 
            -0.07212489f : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                -0.06740034f : 
                -0.067796506f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_31_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.046875f ? 
                 (data[1 /* c1 */] <2.646875f ? 
                    -0.068005025f : 
                     (data[0 /* c0 */] <4.9445314f ? 
                        -0.06725217f : 
                        -0.06710126f)) : 
                0.03125135f) : 
             (data[3 /* c3 */] <1.4507812f ? 
                -0.067911536f : 
                -0.026213083f)) : 
         (data[0 /* c0 */] <6.599219f ? 
             (data[2 /* c2 */] <5.1484375f ? 
                0.036259893f : 
                0.069851786f) : 
             (data[0 /* c0 */] <7.000632f ? 
                -0.013868709f : 
                0.07195345f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class irisModel_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_32_class_0.score0(fdata);
    preds[2] += irisModel_Tree_32_class_1.score0(fdata);
    preds[3] += irisModel_Tree_32_class_2.score0(fdata);
  }
}
class irisModel_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5501541f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <5.1496096f ? 
                 (data[1 /* c1 */] <3.1449218f ? 
                    0.06754496f : 
                    0.06744544f) : 
                0.0676006f) : 
            0.06766323f) : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <5.8488016f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.7471166f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.067597315f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.06711293f : 
                        -0.06726355f)) : 
                 (data[3 /* c3 */] <1.8496094f ? 
                    -0.068097286f : 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <3.04375f ? 
                        -0.06724257f : 
                        -0.0673858f))) : 
            -0.06712065f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_32_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8496094f ? 
         (data[0 /* c0 */] <5.4496093f ? 
             (data[0 /* c0 */] <4.9489007f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4511719f ? 
                    -0.06705992f : 
                    -0.059041116f) : 
                 (data[1 /* c1 */] <3.4519532f ? 
                    0.022496441f : 
                    -0.06716407f)) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.5476563f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.6464844f ? 
                     (data[2 /* c2 */] <3.9464173f ? 
                        0.017815871f : 
                        0.06941127f) : 
                    -0.03375871f) : 
                0.04383029f)) : 
         (data[2 /* c2 */] <5.2521486f ? 
            -0.06902915f : 
             (data[1 /* c1 */] <3.0509765f ? 
                -0.06717209f : 
                -0.06766035f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_32_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[1 /* c1 */] <2.6492188f ? 
             (data[3 /* c3 */] <1.15f ? 
                -0.06785706f : 
                0.031227518f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.24375f ? 
                     (data[1 /* c1 */] <3.1515625f ? 
                        -0.067207634f : 
                        -0.067066275f) : 
                    -0.06785771f) : 
                -0.03672911f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                0.07279305f : 
                0.06783164f) : 
            2.5390153E-5f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_33_class_0.score0(fdata);
    preds[2] += irisModel_Tree_33_class_1.score0(fdata);
    preds[3] += irisModel_Tree_33_class_2.score0(fdata);
  }
}
class irisModel_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.351172f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5501953f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4513321f ? 
                    0.06734423f : 
                    0.06744945f) : 
                0.06754845f) : 
            0.067590326f) : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <5.8488016f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.7471166f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.06753521f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.06706103f : 
                        -0.067210406f)) : 
                 (data[3 /* c3 */] <1.8496094f ? 
                    -0.0679871f : 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <3.04375f ? 
                        -0.06717024f : 
                        -0.06733021f))) : 
            -0.067085564f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_33_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (data[0 /* c0 */] <4.9510427f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4570312f ? 
                    -0.06701065f : 
                    -0.056735285f) : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <2.4472656f ? 
                     (Double.isNaN(data[0]) || data[0 /* c0 */] <5.35f ? 
                        -0.067115456f : 
                        -0.06727193f) : 
                     (data[0 /* c0 */] <5.54375f ? 
                        0.068683684f : 
                        0.04608573f))) : 
             (data[3 /* c3 */] <1.4507812f ? 
                0.068238765f : 
                0.036666404f)) : 
         (data[0 /* c0 */] <6.599219f ? 
             (data[2 /* c2 */] <5.1484375f ? 
                -0.028798405f : 
                -0.06890119f) : 
             (data[0 /* c0 */] <7.000632f ? 
                0.037818372f : 
                -0.07142815f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_33_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.046875f ? 
                 (data[1 /* c1 */] <2.646875f ? 
                    -0.06787927f : 
                     (data[0 /* c0 */] <4.9445314f ? 
                        -0.06711441f : 
                        -0.06700164f)) : 
                0.02876007f) : 
             (data[3 /* c3 */] <1.4507812f ? 
                -0.0677927f : 
                -0.025890488f)) : 
         (data[0 /* c0 */] <6.3496094f ? 
            0.03771933f : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.05f ? 
                4.757103E-4f : 
                0.06890263f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_34_class_0.score0(fdata);
    preds[2] += irisModel_Tree_34_class_1.score0(fdata);
    preds[3] += irisModel_Tree_34_class_2.score0(fdata);
  }
}
class irisModel_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <1.553125f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <5.1496096f ? 
                 (data[1 /* c1 */] <3.1449218f ? 
                    0.06734046f : 
                    0.06726942f) : 
                0.067410104f) : 
            0.067446865f) : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <5.851367f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.74869f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.067476586f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.06701618f : 
                        -0.06715015f)) : 
                 (data[3 /* c3 */] <1.8496094f ? 
                    -0.06789175f : 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <3.04375f ? 
                        -0.067131154f : 
                        -0.06724876f))) : 
            -0.067039624f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_34_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[0 /* c0 */] <5.4496093f ? 
             (data[0 /* c0 */] <4.9489007f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4511719f ? 
                    -0.06696759f : 
                    -0.054613385f) : 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <0.35f ? 
                    -0.067001894f : 
                    0.023820214f)) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <2.9476562f ? 
                     (data[3 /* c3 */] <1.25f ? 
                        0.06799988f : 
                        0.03959257f) : 
                    0.016630992f) : 
                0.027410908f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                -0.07226009f : 
                -0.06722644f) : 
            0.02684869f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_34_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[1 /* c1 */] <2.6492188f ? 
             (data[3 /* c3 */] <1.15f ? 
                -0.06783135f : 
                0.028209759f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.05625f ? 
                     (data[1 /* c1 */] <3.1515625f ? 
                        -0.067062505f : 
                        -0.06697246f) : 
                    -0.06753554f) : 
                -0.035542857f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                0.07293835f : 
                0.06764812f) : 
            -0.004144201f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_35_class_0.score0(fdata);
    preds[2] += irisModel_Tree_35_class_1.score0(fdata);
    preds[3] += irisModel_Tree_35_class_2.score0(fdata);
  }
}
class irisModel_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.351172f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5501953f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4513321f ? 
                    0.06718456f : 
                    0.06727094f) : 
                0.06736247f) : 
            0.06741005f) : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <5.851367f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.74869f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.06743123f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.06698102f : 
                        -0.06710514f)) : 
                 (data[3 /* c3 */] <1.8496094f ? 
                    -0.067804486f : 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <3.04375f ? 
                        -0.06707278f : 
                        -0.06720589f))) : 
            -0.067011826f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_35_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.1484375f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <6.4480467f ? 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.6498047f ? 
                 (data[1 /* c1 */] <2.75f ? 
                     (data[1 /* c1 */] <2.4511719f ? 
                        -0.008996908f : 
                        0.10435256f) : 
                     (data[1 /* c1 */] <2.9433594f ? 
                        -0.038639635f : 
                        -0.0063605173f)) : 
                -0.025729205f) : 
            0.061831277f) : 
         (data[3 /* c3 */] <1.9492188f ? 
            -0.071768664f : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                -0.067192405f : 
                -0.06758773f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_35_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.046875f ? 
                 (data[1 /* c1 */] <2.646875f ? 
                    -0.06782097f : 
                     (data[0 /* c0 */] <4.9445314f ? 
                        -0.06700927f : 
                        -0.06692514f)) : 
                0.026948279f) : 
             (data[3 /* c3 */] <1.4507812f ? 
                -0.06755668f : 
                -0.026271563f)) : 
         (data[0 /* c0 */] <6.3496094f ? 
            0.035036284f : 
             (data[2 /* c2 */] <5.5492187f ? 
                -0.012671778f : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <5.950232f ? 
                    0.07158386f : 
                    0.06745181f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class irisModel_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_36_class_0.score0(fdata);
    preds[2] += irisModel_Tree_36_class_1.score0(fdata);
    preds[3] += irisModel_Tree_36_class_2.score0(fdata);
  }
}
class irisModel_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.351172f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5501953f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4513321f ? 
                    0.06713378f : 
                    0.067210145f) : 
                0.067296535f) : 
            0.067343965f) : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <5.8488016f ? 
             (data[3 /* c3 */] <1.4511719f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.06731463f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.340625f ? 
                        -0.06695651f : 
                        -0.06710334f)) : 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8485794f ? 
                     (data[2 /* c2 */] <4.7375f ? 
                        -0.06725205f : 
                        -0.06776563f) : 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <3.04375f ? 
                        -0.06704334f : 
                        -0.06716095f))) : 
            -0.06697017f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_36_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (data[0 /* c0 */] <4.9510427f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4570312f ? 
                    -0.06691071f : 
                    -0.052514866f) : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <2.4472656f ? 
                     (Double.isNaN(data[0]) || data[0 /* c0 */] <5.35f ? 
                        -0.06700331f : 
                        -0.06713306f) : 
                     (data[0 /* c0 */] <5.54375f ? 
                        0.06838419f : 
                        0.045203075f))) : 
             (data[3 /* c3 */] <1.4507812f ? 
                0.06783565f : 
                0.034384422f)) : 
         (data[0 /* c0 */] <6.599219f ? 
             (data[2 /* c2 */] <5.1484375f ? 
                -0.02642586f : 
                -0.06855184f) : 
             (data[0 /* c0 */] <7.000632f ? 
                0.03745595f : 
                -0.071021065f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_36_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (data[1 /* c1 */] <2.5484376f ? 
                0.030647244f : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <3.9554687f ? 
                     (data[0 /* c0 */] <4.9445314f ? 
                        -0.066966325f : 
                        -0.06689445f) : 
                    -0.03935551f)) : 
             (data[3 /* c3 */] <1.4507812f ? 
                -0.067510195f : 
                -0.02504568f)) : 
         (data[0 /* c0 */] <6.599219f ? 
             (data[2 /* c2 */] <5.1484375f ? 
                0.031382114f : 
                0.06881262f) : 
             (data[0 /* c0 */] <7.000632f ? 
                -0.018672211f : 
                0.07132361f)));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class irisModel_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_37_class_0.score0(fdata);
    preds[2] += irisModel_Tree_37_class_1.score0(fdata);
    preds[3] += irisModel_Tree_37_class_2.score0(fdata);
  }
}
class irisModel_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.351172f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5501953f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4513321f ? 
                    0.067076206f : 
                    0.067143425f) : 
                0.06721863f) : 
            0.06725881f) : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <5.8488016f ? 
             (data[3 /* c3 */] <1.4511719f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.06728254f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.340625f ? 
                        -0.0669239f : 
                        -0.067050435f)) : 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8485794f ? 
                     (data[2 /* c2 */] <4.7375f ? 
                        -0.067201324f : 
                        -0.06767986f) : 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <3.04375f ? 
                        -0.06701672f : 
                        -0.067121245f))) : 
            -0.066937074f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_37_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[0 /* c0 */] <5.4496093f ? 
             (data[0 /* c0 */] <4.9489007f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4511719f ? 
                    -0.066880174f : 
                    -0.04912186f) : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.546875f ? 
                    -0.06691006f : 
                    0.024891548f)) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
                 (data[2 /* c2 */] <3.9492188f ? 
                    0.014813414f : 
                     (data[0 /* c0 */] <6.0507812f ? 
                        0.067651704f : 
                        0.03364913f)) : 
                0.025128437f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                -0.071931936f : 
                -0.06713257f) : 
            0.02717619f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_37_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[1 /* c1 */] <2.6492188f ? 
             (data[3 /* c3 */] <1.15f ? 
                -0.06789658f : 
                0.02807816f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.05625f ? 
                     (data[1 /* c1 */] <3.1515625f ? 
                        -0.06693792f : 
                        -0.0668714f) : 
                    -0.06732216f) : 
                -0.03477912f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                0.072472475f : 
                0.0674416f) : 
            -0.00795482f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_38_class_0.score0(fdata);
    preds[2] += irisModel_Tree_38_class_1.score0(fdata);
    preds[3] += irisModel_Tree_38_class_2.score0(fdata);
  }
}
class irisModel_Tree_38_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.351172f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5501953f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4513321f ? 
                    0.06702484f : 
                    0.06708528f) : 
                0.06717091f) : 
            0.06721149f) : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <5.8488016f ? 
             (data[3 /* c3 */] <1.4511719f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.06726223f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.340625f ? 
                        -0.066896915f : 
                        -0.06701389f)) : 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8485794f ? 
                     (data[2 /* c2 */] <4.7375f ? 
                        -0.06715806f : 
                        -0.0676085f) : 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <3.04375f ? 
                        -0.0669728f : 
                        -0.06708923f))) : 
            -0.066918865f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_38_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (data[0 /* c0 */] <4.9510427f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4570312f ? 
                    -0.06685348f : 
                    -0.04740789f) : 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <0.79765624f ? 
                     (Double.isNaN(data[0]) || data[0 /* c0 */] <5.35f ? 
                        -0.06694147f : 
                        -0.06705182f) : 
                     (data[0 /* c0 */] <5.54375f ? 
                        0.06812169f : 
                        0.04240173f))) : 
             (data[3 /* c3 */] <1.4507812f ? 
                0.067599796f : 
                0.033839956f)) : 
         (data[0 /* c0 */] <6.599219f ? 
             (data[2 /* c2 */] <5.1484375f ? 
                -0.025024515f : 
                -0.06837129f) : 
             (data[0 /* c0 */] <7.000632f ? 
                0.0334955f : 
                -0.07083984f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_38_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.046875f ? 
                 (data[1 /* c1 */] <2.54375f ? 
                    -0.06789519f : 
                     (data[1 /* c1 */] <3.152832f ? 
                        -0.06694948f : 
                        -0.06684578f)) : 
                0.026057174f) : 
             (data[3 /* c3 */] <1.4507812f ? 
                -0.06734635f : 
                -0.025513534f)) : 
         (data[0 /* c0 */] <6.3496094f ? 
            0.031284317f : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.05f ? 
                -0.0073415977f : 
                0.06865113f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_39_class_0.score0(fdata);
    preds[2] += irisModel_Tree_39_class_1.score0(fdata);
    preds[3] += irisModel_Tree_39_class_2.score0(fdata);
  }
}
class irisModel_Tree_39_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.351172f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5501953f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4513321f ? 
                    0.066979945f : 
                    0.067034416f) : 
                0.06710887f) : 
            0.06714308f) : 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <5.8488016f ? 
             (data[3 /* c3 */] <1.4511719f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.06724266f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.340625f ? 
                        -0.06687138f : 
                        -0.066977344f)) : 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8485794f ? 
                     (data[2 /* c2 */] <4.7375f ? 
                        -0.0671161f : 
                        -0.067541786f) : 
                     (Double.isNaN(data[1]) || data[1 /* c1 */] <3.04375f ? 
                        -0.066951334f : 
                        -0.067037724f))) : 
            -0.06689091f));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_39_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <6.4480467f ? 
             (data[1 /* c1 */] <2.75f ? 
                 (data[1 /* c1 */] <2.4511719f ? 
                    -0.013139258f : 
                    0.05322666f) : 
                 (data[1 /* c1 */] <2.9498048f ? 
                    -0.04680451f : 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <0.5570313f ? 
                        -0.066912614f : 
                        0.06408026f))) : 
            0.053286973f) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                -0.0715969f : 
                -0.06707968f) : 
            0.025775632f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_39_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[1 /* c1 */] <2.6492188f ? 
             (data[3 /* c3 */] <1.15f ? 
                -0.06790224f : 
                0.027299047f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.05625f ? 
                     (data[1 /* c1 */] <3.1515625f ? 
                        -0.066877946f : 
                        -0.0668234f) : 
                    -0.06719416f) : 
                -0.033179045f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                0.072042204f : 
                0.0673252f) : 
            -0.008937125f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_40_class_0.score0(fdata);
    preds[2] += irisModel_Tree_40_class_1.score0(fdata);
    preds[3] += irisModel_Tree_40_class_2.score0(fdata);
  }
}
class irisModel_Tree_40_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.351172f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5501953f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4513321f ? 
                    0.06694128f : 
                    0.066988334f) : 
                0.06705813f) : 
            0.067083344f) : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8511772f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.751953f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.06724269f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.066855215f : 
                        -0.066940755f)) : 
                 (data[2 /* c2 */] <5.048259f ? 
                    -0.067502275f : 
                    -0.06734959f)) : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.0511718f ? 
                -0.06689086f : 
                -0.06698908f)));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_40_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.1484375f ? 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.5507812f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.547461f ? 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <0.8f ? 
                     (Double.isNaN(data[0]) || data[0 /* c0 */] <5.35f ? 
                        -0.06685222f : 
                        -0.066961385f) : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.3632812f ? 
                        0.06786741f : 
                        0.0695741f)) : 
                -0.033530623f) : 
            0.02497649f) : 
         (data[3 /* c3 */] <1.9492188f ? 
            -0.071048364f : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                -0.06707509f : 
                -0.06748438f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_40_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.046875f ? 
                 (data[1 /* c1 */] <2.54375f ? 
                    -0.06782814f : 
                     (data[1 /* c1 */] <3.152832f ? 
                        -0.06689993f : 
                        -0.06680382f)) : 
                0.027427211f) : 
             (data[3 /* c3 */] <1.4507812f ? 
                -0.06724851f : 
                -0.025764791f)) : 
         (data[1 /* c1 */] <2.75f ? 
            -0.007282786f : 
             (data[0 /* c0 */] <6.451953f ? 
                0.09552081f : 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.05f ? 
                    -0.013365947f : 
                    0.06859692f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class irisModel_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_41_class_0.score0(fdata);
    preds[2] += irisModel_Tree_41_class_1.score0(fdata);
    preds[3] += irisModel_Tree_41_class_2.score0(fdata);
  }
}
class irisModel_Tree_41_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.351172f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5501953f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4513321f ? 
                    0.06690689f : 
                    0.06694804f) : 
                0.06700908f) : 
            0.0670311f) : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8511772f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.751953f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.06717732f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.06683151f : 
                        -0.06691921f)) : 
                 (data[2 /* c2 */] <5.048259f ? 
                    -0.06744248f : 
                    -0.06729989f)) : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1496093f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <5.5484376f ? 
                    -0.06691639f : 
                    -0.06680334f) : 
                -0.066957064f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_41_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.1484375f ? 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.5507812f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.547461f ? 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <0.8f ? 
                     (Double.isNaN(data[0]) || data[0 /* c0 */] <5.35f ? 
                        -0.066829026f : 
                        -0.06692448f) : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.3632812f ? 
                        0.06772086f : 
                        0.06932966f)) : 
                -0.031015875f) : 
            0.022855517f) : 
         (data[3 /* c3 */] <1.9492188f ? 
            -0.07083918f : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                -0.06704858f : 
                -0.06737665f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_41_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[1 /* c1 */] <2.6492188f ? 
             (data[3 /* c3 */] <1.15f ? 
                -0.06770394f : 
                0.027619679f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.05625f ? 
                     (data[1 /* c1 */] <3.1515625f ? 
                        -0.066833206f : 
                        -0.066786684f) : 
                    -0.067155f) : 
                -0.03174307f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                0.07158773f : 
                0.06720263f) : 
            -0.010949592f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_42_class_0.score0(fdata);
    preds[2] += irisModel_Tree_42_class_1.score0(fdata);
    preds[3] += irisModel_Tree_42_class_2.score0(fdata);
  }
}
class irisModel_Tree_42_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.351172f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5501953f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4513321f ? 
                    0.066876814f : 
                    0.066912815f) : 
                0.06696619f) : 
            0.066985436f) : 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8511772f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.751953f ? 
                 (data[1 /* c1 */] <2.546875f ? 
                    -0.067119546f : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.447656f ? 
                        -0.06681082f : 
                        -0.06690071f)) : 
                 (data[2 /* c2 */] <5.048259f ? 
                    -0.06737816f : 
                    -0.0672796f)) : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1496093f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <5.5484376f ? 
                    -0.06688493f : 
                    -0.066786245f) : 
                -0.06694127f)));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_42_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.1484375f ? 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.5507812f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.547461f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <2.4550133f ? 
                     (Double.isNaN(data[0]) || data[0 /* c0 */] <5.35f ? 
                        -0.06680873f : 
                        -0.06689222f) : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.340235f ? 
                        0.06759992f : 
                        0.06919116f)) : 
                -0.02962326f) : 
            0.022368914f) : 
         (data[3 /* c3 */] <1.9492188f ? 
            -0.07071064f : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                -0.06700097f : 
                -0.06733794f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_42_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.046875f ? 
                 (data[1 /* c1 */] <2.54375f ? 
                    -0.06757186f : 
                     (data[1 /* c1 */] <3.152832f ? 
                        -0.06685472f : 
                        -0.06677169f)) : 
                0.031409357f) : 
             (data[3 /* c3 */] <1.4507812f ? 
                -0.06720341f : 
                -0.024710009f)) : 
         (data[1 /* c1 */] <2.75f ? 
            -0.00887925f : 
             (data[0 /* c0 */] <6.451953f ? 
                0.09325628f : 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.05f ? 
                    -0.015493202f : 
                    0.06852596f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class irisModel_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_43_class_0.score0(fdata);
    preds[2] += irisModel_Tree_43_class_1.score0(fdata);
    preds[3] += irisModel_Tree_43_class_2.score0(fdata);
  }
}
class irisModel_Tree_43_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.351172f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5501953f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4513321f ? 
                    0.06685051f : 
                    0.06688201f) : 
                0.06692869f) : 
            0.06694551f) : 
         (data[2 /* c2 */] <4.450099f ? 
             (data[1 /* c1 */] <2.551953f ? 
                -0.06703687f : 
                -0.06679271f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8496094f ? 
                 (data[2 /* c2 */] <4.74375f ? 
                    -0.06695043f : 
                     (data[2 /* c2 */] <5.047705f ? 
                        -0.06732781f : 
                        -0.067236245f)) : 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15625f ? 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <5.55625f ? 
                        -0.066869356f : 
                        -0.066776454f) : 
                    -0.06690519f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_43_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (data[0 /* c0 */] <4.9510427f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4511719f ? 
                    -0.06676309f : 
                    -0.0556972f) : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <2.4492188f ? 
                     (Double.isNaN(data[0]) || data[0 /* c0 */] <5.35f ? 
                        -0.06681054f : 
                        -0.066864f) : 
                     (data[2 /* c2 */] <3.9552612f ? 
                        0.067052834f : 
                        0.0677283f))) : 
             (data[3 /* c3 */] <1.45f ? 
                0.029782863f : 
                0.021691108f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                -0.07124836f : 
                -0.0669437f) : 
            0.028322486f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_43_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[1 /* c1 */] <2.6492188f ? 
             (data[3 /* c3 */] <1.15f ? 
                -0.06746519f : 
                0.0264758f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.05625f ? 
                     (data[1 /* c1 */] <3.1515625f ? 
                        -0.06679411f : 
                        -0.06675857f) : 
                    -0.06711627f) : 
                -0.03198561f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                0.07155912f : 
                0.06710539f) : 
            -0.014594609f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_44_class_0.score0(fdata);
    preds[2] += irisModel_Tree_44_class_1.score0(fdata);
    preds[3] += irisModel_Tree_44_class_2.score0(fdata);
  }
}
class irisModel_Tree_44_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5501541f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <5.1496096f ? 
                 (data[1 /* c1 */] <3.1449218f ? 
                    0.066852115f : 
                    0.06683075f) : 
                0.06688714f) : 
            0.06689981f) : 
         (data[2 /* c2 */] <4.450099f ? 
             (data[1 /* c1 */] <2.551953f ? 
                -0.06703205f : 
                -0.06677862f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8496094f ? 
                 (data[2 /* c2 */] <4.74375f ? 
                    -0.06692689f : 
                     (data[2 /* c2 */] <5.047705f ? 
                        -0.06727243f : 
                        -0.06721314f)) : 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15625f ? 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <5.55625f ? 
                        -0.06684393f : 
                        -0.06676272f) : 
                    -0.06689285f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_44_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (data[0 /* c0 */] <4.9510427f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4570312f ? 
                    -0.06675105f : 
                    -0.053875122f) : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <2.4472656f ? 
                     (Double.isNaN(data[0]) || data[0 /* c0 */] <5.35f ? 
                        -0.06679256f : 
                        -0.066839315f) : 
                     (data[0 /* c0 */] <5.54375f ? 
                        0.067598715f : 
                        0.03716384f))) : 
             (data[3 /* c3 */] <1.4507812f ? 
                0.067293085f : 
                0.031812668f)) : 
         (data[1 /* c1 */] <2.75f ? 
            0.0134217525f : 
             (data[0 /* c0 */] <6.451953f ? 
                -0.09285824f : 
                 (data[0 /* c0 */] <6.8479033f ? 
                    0.027452579f : 
                    -0.07028212f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_44_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (data[1 /* c1 */] <2.5484376f ? 
                0.040486667f : 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <3.9554687f ? 
                     (data[1 /* c1 */] <3.1484375f ? 
                        -0.066773735f : 
                        -0.0667471f) : 
                    -0.03629758f)) : 
             (data[3 /* c3 */] <1.4507812f ? 
                -0.06713945f : 
                -0.026071558f)) : 
         (data[1 /* c1 */] <2.75f ? 
            -0.008736584f : 
             (data[0 /* c0 */] <6.451953f ? 
                0.09236661f : 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.05f ? 
                    -0.01563225f : 
                    0.06849506f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class irisModel_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_45_class_0.score0(fdata);
    preds[2] += irisModel_Tree_45_class_1.score0(fdata);
    preds[3] += irisModel_Tree_45_class_2.score0(fdata);
  }
}
class irisModel_Tree_45_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <1.553125f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <5.1496096f ? 
                 (data[1 /* c1 */] <3.1449218f ? 
                    0.06683009f : 
                    0.06681023f) : 
                0.06685956f) : 
            0.06687092f) : 
         (data[2 /* c2 */] <4.4512696f ? 
             (data[1 /* c1 */] <2.551953f ? 
                -0.06702894f : 
                -0.0667665f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8496094f ? 
                 (data[2 /* c2 */] <4.74375f ? 
                    -0.06690186f : 
                     (data[2 /* c2 */] <5.047705f ? 
                        -0.0672265f : 
                        -0.06717939f)) : 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15625f ? 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <5.55625f ? 
                        -0.06683349f : 
                        -0.06675541f) : 
                    -0.06686318f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_45_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (data[0 /* c0 */] <4.9510427f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4511719f ? 
                    -0.066740505f : 
                    -0.050287444f) : 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <0.80625f ? 
                     (Double.isNaN(data[0]) || data[0 /* c0 */] <5.35f ? 
                        -0.06677683f : 
                        -0.06681773f) : 
                     (data[2 /* c2 */] <3.9585938f ? 
                        0.06697837f : 
                        0.06754995f))) : 
             (data[3 /* c3 */] <1.45f ? 
                0.022703703f : 
                0.020237006f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                -0.07094735f : 
                -0.06691717f) : 
            0.026542125f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_45_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[1 /* c1 */] <2.6492188f ? 
             (data[3 /* c3 */] <1.15f ? 
                -0.0675978f : 
                0.026639469f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.45f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <4.05625f ? 
                     (data[1 /* c1 */] <3.1515625f ? 
                        -0.066765286f : 
                        -0.06673705f) : 
                    -0.06702523f) : 
                -0.03166067f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                0.07120635f : 
                0.06704788f) : 
            -0.014625912f));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}


class irisModel_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_46_class_0.score0(fdata);
    preds[2] += irisModel_Tree_46_class_1.score0(fdata);
    preds[3] += irisModel_Tree_46_class_2.score0(fdata);
  }
}
class irisModel_Tree_46_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5501541f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <5.1496096f ? 
                 (data[1 /* c1 */] <3.1449218f ? 
                    0.06681024f : 
                    0.06679228f) : 
                0.06683543f) : 
            0.066845685f) : 
         (data[2 /* c2 */] <4.450099f ? 
             (data[1 /* c1 */] <2.551953f ? 
                -0.067028075f : 
                -0.066755615f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8496094f ? 
                 (data[2 /* c2 */] <4.74375f ? 
                    -0.06688256f : 
                     (data[2 /* c2 */] <5.047705f ? 
                        -0.06717985f : 
                        -0.06715941f)) : 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15625f ? 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <5.55625f ? 
                        -0.066812575f : 
                        -0.066744305f) : 
                    -0.06685303f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_46_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (data[0 /* c0 */] <4.9510427f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4570312f ? 
                    -0.06673128f : 
                    -0.048693024f) : 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <0.79765624f ? 
                     (Double.isNaN(data[0]) || data[0 /* c0 */] <5.35f ? 
                        -0.066763066f : 
                        -0.06679885f) : 
                     (data[0 /* c0 */] <5.54375f ? 
                        0.06744373f : 
                        0.033885807f))) : 
             (data[3 /* c3 */] <1.4507812f ? 
                0.06717418f : 
                0.031537652f)) : 
         (data[1 /* c1 */] <2.75f ? 
            0.011173245f : 
             (data[0 /* c0 */] <6.6023436f ? 
                -0.086444594f : 
                 (data[0 /* c0 */] <7.0027924f ? 
                    0.038242597f : 
                    -0.07119448f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_46_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.046875f ? 
                 (data[1 /* c1 */] <2.54375f ? 
                    -0.06754878f : 
                     (data[1 /* c1 */] <3.152832f ? 
                        -0.06679761f : 
                        -0.066728264f)) : 
                0.03360275f) : 
             (data[3 /* c3 */] <1.4507812f ? 
                -0.067053154f : 
                -0.026413651f)) : 
         (data[1 /* c1 */] <2.75f ? 
            -0.007221518f : 
             (data[0 /* c0 */] <6.6023436f ? 
                0.085957915f : 
                 (data[0 /* c0 */] <7.0027924f ? 
                    -0.027994588f : 
                    0.07146206f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class irisModel_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_47_class_0.score0(fdata);
    preds[2] += irisModel_Tree_47_class_1.score0(fdata);
    preds[3] += irisModel_Tree_47_class_2.score0(fdata);
  }
}
class irisModel_Tree_47_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <1.553125f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <5.1496096f ? 
                 (data[1 /* c1 */] <3.1449218f ? 
                    0.06679286f : 
                    0.06677658f) : 
                0.06681433f) : 
            0.06682361f) : 
         (data[2 /* c2 */] <4.4512696f ? 
             (data[1 /* c1 */] <2.551953f ? 
                -0.06702903f : 
                -0.06674613f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8496094f ? 
                 (data[2 /* c2 */] <4.74375f ? 
                    -0.06686234f : 
                     (data[2 /* c2 */] <5.047705f ? 
                        -0.06714046f : 
                        -0.06711064f)) : 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15625f ? 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <5.55625f ? 
                        -0.066803895f : 
                        -0.0667357f) : 
                    -0.06683555f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_47_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.1484375f ? 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.5507812f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.547461f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <2.4550133f ? 
                     (Double.isNaN(data[0]) || data[0 /* c0 */] <5.35f ? 
                        -0.0667401f : 
                        -0.066782326f) : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.340235f ? 
                        0.0675099f : 
                        0.06871064f)) : 
                -0.031285692f) : 
            0.023065826f) : 
         (data[3 /* c3 */] <1.9492188f ? 
            -0.070393756f : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                -0.06693729f : 
                -0.06727943f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_47_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[1 /* c1 */] <2.45f ? 
            0.03892763f : 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.646875f ? 
                 (data[1 /* c1 */] <2.7523437f ? 
                    0.048144512f : 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <1.35f ? 
                        -0.06677743f : 
                        -0.067762f)) : 
                -0.030845327f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                0.070865296f : 
                0.067004174f) : 
            -0.014156484f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


class irisModel_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_48_class_0.score0(fdata);
    preds[2] += irisModel_Tree_48_class_1.score0(fdata);
    preds[3] += irisModel_Tree_48_class_2.score0(fdata);
  }
}
class irisModel_Tree_48_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* c3 */] <0.80078125f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <1.553125f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <5.1496096f ? 
                 (data[1 /* c1 */] <3.1449218f ? 
                    0.0667776f : 
                    0.06676284f) : 
                0.06679587f) : 
            0.066803984f) : 
         (data[2 /* c2 */] <4.4512696f ? 
             (data[1 /* c1 */] <2.551953f ? 
                -0.066983975f : 
                -0.06673616f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8496094f ? 
                 (data[2 /* c2 */] <4.74375f ? 
                    -0.06684471f : 
                     (data[2 /* c2 */] <5.047705f ? 
                        -0.06710123f : 
                        -0.06709763f)) : 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15625f ? 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <5.55625f ? 
                        -0.066786654f : 
                        -0.06672707f) : 
                    -0.066826895f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_48_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <5.1484375f ? 
         (Double.isNaN(data[3]) || data[3 /* c3 */] <1.5507812f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.547461f ? 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <0.8f ? 
                     (Double.isNaN(data[0]) || data[0 /* c0 */] <5.35f ? 
                        -0.06673093f : 
                        -0.06676787f) : 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <4.3632812f ? 
                        0.067464314f : 
                        0.06864113f)) : 
                -0.0304062f) : 
            0.022689393f) : 
         (data[3 /* c3 */] <1.9492188f ? 
            -0.07028707f : 
             (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15f ? 
                -0.066903554f : 
                -0.0672479f)));
    return pred;
  } // constant pool size = 34B, number of visited nodes = 8, static init size = 0B
}

class irisModel_Tree_48_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[2]) || data[2 /* c2 */] <4.9496584f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.046875f ? 
                 (data[1 /* c1 */] <2.54375f ? 
                    -0.067521885f : 
                     (data[1 /* c1 */] <3.152832f ? 
                        -0.066781f : 
                        -0.06671384f)) : 
                0.034138016f) : 
             (data[3 /* c3 */] <1.4507812f ? 
                -0.067005895f : 
                -0.023797303f)) : 
         (data[1 /* c1 */] <2.75f ? 
            -0.0071735843f : 
             (data[0 /* c0 */] <6.6023436f ? 
                0.08352627f : 
                 (data[0 /* c0 */] <7.0027924f ? 
                    -0.025409142f : 
                    0.0707484f))));
    return pred;
  } // constant pool size = 38B, number of visited nodes = 9, static init size = 0B
}


class irisModel_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += irisModel_Tree_49_class_0.score0(fdata);
    preds[2] += irisModel_Tree_49_class_1.score0(fdata);
    preds[3] += irisModel_Tree_49_class_2.score0(fdata);
  }
}
class irisModel_Tree_49_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[2 /* c2 */] <2.4519532f ? 
         (Double.isNaN(data[2]) || data[2 /* c2 */] <1.5501541f ? 
             (Double.isNaN(data[0]) || data[0 /* c0 */] <5.1496096f ? 
                 (data[1 /* c1 */] <3.1449218f ? 
                    0.06676374f : 
                    0.066750824f) : 
                0.06677972f) : 
            0.06678682f) : 
         (data[2 /* c2 */] <4.450099f ? 
             (data[1 /* c1 */] <2.551953f ? 
                -0.066945225f : 
                -0.066727445f) : 
             (Double.isNaN(data[3]) || data[3 /* c3 */] <1.8496094f ? 
                 (data[2 /* c2 */] <4.74375f ? 
                    -0.066830374f : 
                     (data[2 /* c2 */] <5.047705f ? 
                        -0.06706944f : 
                        -0.06705223f)) : 
                 (Double.isNaN(data[1]) || data[1 /* c1 */] <3.15625f ? 
                     (Double.isNaN(data[2]) || data[2 /* c2 */] <5.55625f ? 
                        -0.066779785f : 
                        -0.066720694f) : 
                    -0.06681299f))));
    return pred;
  } // constant pool size = 46B, number of visited nodes = 11, static init size = 0B
}

class irisModel_Tree_49_class_1 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (Double.isNaN(data[0]) || data[0 /* c0 */] <5.8503904f ? 
             (data[0 /* c0 */] <4.9510427f ? 
                 (Double.isNaN(data[2]) || data[2 /* c2 */] <1.4511719f ? 
                    -0.066709965f : 
                    -0.050216284f) : 
                 (Double.isNaN(data[3]) || data[3 /* c3 */] <0.80625f ? 
                     (Double.isNaN(data[0]) || data[0 /* c0 */] <5.35f ? 
                        -0.06673127f : 
                        -0.06675523f) : 
                     (data[2 /* c2 */] <3.9585938f ? 
                        0.066860065f : 
                        0.06732467f))) : 
             (data[3 /* c3 */] <1.45f ? 
                0.015082301f : 
                0.01996781f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                -0.07066381f : 
                -0.066864364f) : 
            0.025456684f));
    return pred;
  } // constant pool size = 42B, number of visited nodes = 10, static init size = 0B
}

class irisModel_Tree_49_class_2 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[3]) || data[3 /* c3 */] <1.75f ? 
         (data[1 /* c1 */] <2.45f ? 
            0.040553086f : 
             (Double.isNaN(data[2]) || data[2 /* c2 */] <4.646875f ? 
                 (data[1 /* c1 */] <2.7523437f ? 
                    0.04945092f : 
                     (Double.isNaN(data[3]) || data[3 /* c3 */] <1.35f ? 
                        -0.06676025f : 
                        -0.067664064f)) : 
                -0.032545276f)) : 
         (Double.isNaN(data[1]) || data[1 /* c1 */] <3.1484375f ? 
             (data[2 /* c2 */] <5.148633f ? 
                0.07084532f : 
                0.066948995f) : 
            -0.015711762f));
    return pred;
  } // constant pool size = 30B, number of visited nodes = 7, static init size = 0B
}


